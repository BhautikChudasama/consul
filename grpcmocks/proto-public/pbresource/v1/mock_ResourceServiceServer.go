// Code generated by mockery v2.37.1. DO NOT EDIT.

package mockresourcev1

import (
	context "context"

	resourcev1 "github.com/hashicorp/consul/proto-public/pbresource/v1"
	mock "github.com/stretchr/testify/mock"
)

// ResourceServiceServer is an autogenerated mock type for the ResourceServiceServer type
type ResourceServiceServer struct {
	mock.Mock
}

type ResourceServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *ResourceServiceServer) EXPECT() *ResourceServiceServer_Expecter {
	return &ResourceServiceServer_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: _a0, _a1
func (_m *ResourceServiceServer) Delete(_a0 context.Context, _a1 *resourcev1.DeleteRequest) (*resourcev1.DeleteResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *resourcev1.DeleteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourcev1.DeleteRequest) (*resourcev1.DeleteResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourcev1.DeleteRequest) *resourcev1.DeleteResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcev1.DeleteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourcev1.DeleteRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceServiceServer_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ResourceServiceServer_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *resourcev1.DeleteRequest
func (_e *ResourceServiceServer_Expecter) Delete(_a0 interface{}, _a1 interface{}) *ResourceServiceServer_Delete_Call {
	return &ResourceServiceServer_Delete_Call{Call: _e.mock.On("Delete", _a0, _a1)}
}

func (_c *ResourceServiceServer_Delete_Call) Run(run func(_a0 context.Context, _a1 *resourcev1.DeleteRequest)) *ResourceServiceServer_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*resourcev1.DeleteRequest))
	})
	return _c
}

func (_c *ResourceServiceServer_Delete_Call) Return(_a0 *resourcev1.DeleteResponse, _a1 error) *ResourceServiceServer_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceServiceServer_Delete_Call) RunAndReturn(run func(context.Context, *resourcev1.DeleteRequest) (*resourcev1.DeleteResponse, error)) *ResourceServiceServer_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: _a0, _a1
func (_m *ResourceServiceServer) List(_a0 context.Context, _a1 *resourcev1.ListRequest) (*resourcev1.ListResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *resourcev1.ListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourcev1.ListRequest) (*resourcev1.ListResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourcev1.ListRequest) *resourcev1.ListResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcev1.ListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourcev1.ListRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceServiceServer_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type ResourceServiceServer_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *resourcev1.ListRequest
func (_e *ResourceServiceServer_Expecter) List(_a0 interface{}, _a1 interface{}) *ResourceServiceServer_List_Call {
	return &ResourceServiceServer_List_Call{Call: _e.mock.On("List", _a0, _a1)}
}

func (_c *ResourceServiceServer_List_Call) Run(run func(_a0 context.Context, _a1 *resourcev1.ListRequest)) *ResourceServiceServer_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*resourcev1.ListRequest))
	})
	return _c
}

func (_c *ResourceServiceServer_List_Call) Return(_a0 *resourcev1.ListResponse, _a1 error) *ResourceServiceServer_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceServiceServer_List_Call) RunAndReturn(run func(context.Context, *resourcev1.ListRequest) (*resourcev1.ListResponse, error)) *ResourceServiceServer_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListByOwner provides a mock function with given fields: _a0, _a1
func (_m *ResourceServiceServer) ListByOwner(_a0 context.Context, _a1 *resourcev1.ListByOwnerRequest) (*resourcev1.ListByOwnerResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *resourcev1.ListByOwnerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourcev1.ListByOwnerRequest) (*resourcev1.ListByOwnerResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourcev1.ListByOwnerRequest) *resourcev1.ListByOwnerResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcev1.ListByOwnerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourcev1.ListByOwnerRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceServiceServer_ListByOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByOwner'
type ResourceServiceServer_ListByOwner_Call struct {
	*mock.Call
}

// ListByOwner is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *resourcev1.ListByOwnerRequest
func (_e *ResourceServiceServer_Expecter) ListByOwner(_a0 interface{}, _a1 interface{}) *ResourceServiceServer_ListByOwner_Call {
	return &ResourceServiceServer_ListByOwner_Call{Call: _e.mock.On("ListByOwner", _a0, _a1)}
}

func (_c *ResourceServiceServer_ListByOwner_Call) Run(run func(_a0 context.Context, _a1 *resourcev1.ListByOwnerRequest)) *ResourceServiceServer_ListByOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*resourcev1.ListByOwnerRequest))
	})
	return _c
}

func (_c *ResourceServiceServer_ListByOwner_Call) Return(_a0 *resourcev1.ListByOwnerResponse, _a1 error) *ResourceServiceServer_ListByOwner_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceServiceServer_ListByOwner_Call) RunAndReturn(run func(context.Context, *resourcev1.ListByOwnerRequest) (*resourcev1.ListByOwnerResponse, error)) *ResourceServiceServer_ListByOwner_Call {
	_c.Call.Return(run)
	return _c
}

// MutateAndValidate provides a mock function with given fields: _a0, _a1
func (_m *ResourceServiceServer) MutateAndValidate(_a0 context.Context, _a1 *resourcev1.MutateAndValidateRequest) (*resourcev1.MutateAndValidateResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *resourcev1.MutateAndValidateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourcev1.MutateAndValidateRequest) (*resourcev1.MutateAndValidateResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourcev1.MutateAndValidateRequest) *resourcev1.MutateAndValidateResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcev1.MutateAndValidateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourcev1.MutateAndValidateRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceServiceServer_MutateAndValidate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MutateAndValidate'
type ResourceServiceServer_MutateAndValidate_Call struct {
	*mock.Call
}

// MutateAndValidate is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *resourcev1.MutateAndValidateRequest
func (_e *ResourceServiceServer_Expecter) MutateAndValidate(_a0 interface{}, _a1 interface{}) *ResourceServiceServer_MutateAndValidate_Call {
	return &ResourceServiceServer_MutateAndValidate_Call{Call: _e.mock.On("MutateAndValidate", _a0, _a1)}
}

func (_c *ResourceServiceServer_MutateAndValidate_Call) Run(run func(_a0 context.Context, _a1 *resourcev1.MutateAndValidateRequest)) *ResourceServiceServer_MutateAndValidate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*resourcev1.MutateAndValidateRequest))
	})
	return _c
}

func (_c *ResourceServiceServer_MutateAndValidate_Call) Return(_a0 *resourcev1.MutateAndValidateResponse, _a1 error) *ResourceServiceServer_MutateAndValidate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceServiceServer_MutateAndValidate_Call) RunAndReturn(run func(context.Context, *resourcev1.MutateAndValidateRequest) (*resourcev1.MutateAndValidateResponse, error)) *ResourceServiceServer_MutateAndValidate_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: _a0, _a1
func (_m *ResourceServiceServer) Read(_a0 context.Context, _a1 *resourcev1.ReadRequest) (*resourcev1.ReadResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *resourcev1.ReadResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourcev1.ReadRequest) (*resourcev1.ReadResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourcev1.ReadRequest) *resourcev1.ReadResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcev1.ReadResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourcev1.ReadRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceServiceServer_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type ResourceServiceServer_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *resourcev1.ReadRequest
func (_e *ResourceServiceServer_Expecter) Read(_a0 interface{}, _a1 interface{}) *ResourceServiceServer_Read_Call {
	return &ResourceServiceServer_Read_Call{Call: _e.mock.On("Read", _a0, _a1)}
}

func (_c *ResourceServiceServer_Read_Call) Run(run func(_a0 context.Context, _a1 *resourcev1.ReadRequest)) *ResourceServiceServer_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*resourcev1.ReadRequest))
	})
	return _c
}

func (_c *ResourceServiceServer_Read_Call) Return(_a0 *resourcev1.ReadResponse, _a1 error) *ResourceServiceServer_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceServiceServer_Read_Call) RunAndReturn(run func(context.Context, *resourcev1.ReadRequest) (*resourcev1.ReadResponse, error)) *ResourceServiceServer_Read_Call {
	_c.Call.Return(run)
	return _c
}

// WatchList provides a mock function with given fields: _a0, _a1
func (_m *ResourceServiceServer) WatchList(_a0 *resourcev1.WatchListRequest, _a1 resourcev1.ResourceService_WatchListServer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(*resourcev1.WatchListRequest, resourcev1.ResourceService_WatchListServer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResourceServiceServer_WatchList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchList'
type ResourceServiceServer_WatchList_Call struct {
	*mock.Call
}

// WatchList is a helper method to define mock.On call
//   - _a0 *resourcev1.WatchListRequest
//   - _a1 resourcev1.ResourceService_WatchListServer
func (_e *ResourceServiceServer_Expecter) WatchList(_a0 interface{}, _a1 interface{}) *ResourceServiceServer_WatchList_Call {
	return &ResourceServiceServer_WatchList_Call{Call: _e.mock.On("WatchList", _a0, _a1)}
}

func (_c *ResourceServiceServer_WatchList_Call) Run(run func(_a0 *resourcev1.WatchListRequest, _a1 resourcev1.ResourceService_WatchListServer)) *ResourceServiceServer_WatchList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*resourcev1.WatchListRequest), args[1].(resourcev1.ResourceService_WatchListServer))
	})
	return _c
}

func (_c *ResourceServiceServer_WatchList_Call) Return(_a0 error) *ResourceServiceServer_WatchList_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ResourceServiceServer_WatchList_Call) RunAndReturn(run func(*resourcev1.WatchListRequest, resourcev1.ResourceService_WatchListServer) error) *ResourceServiceServer_WatchList_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function with given fields: _a0, _a1
func (_m *ResourceServiceServer) Write(_a0 context.Context, _a1 *resourcev1.WriteRequest) (*resourcev1.WriteResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *resourcev1.WriteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourcev1.WriteRequest) (*resourcev1.WriteResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourcev1.WriteRequest) *resourcev1.WriteResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcev1.WriteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourcev1.WriteRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceServiceServer_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type ResourceServiceServer_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *resourcev1.WriteRequest
func (_e *ResourceServiceServer_Expecter) Write(_a0 interface{}, _a1 interface{}) *ResourceServiceServer_Write_Call {
	return &ResourceServiceServer_Write_Call{Call: _e.mock.On("Write", _a0, _a1)}
}

func (_c *ResourceServiceServer_Write_Call) Run(run func(_a0 context.Context, _a1 *resourcev1.WriteRequest)) *ResourceServiceServer_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*resourcev1.WriteRequest))
	})
	return _c
}

func (_c *ResourceServiceServer_Write_Call) Return(_a0 *resourcev1.WriteResponse, _a1 error) *ResourceServiceServer_Write_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceServiceServer_Write_Call) RunAndReturn(run func(context.Context, *resourcev1.WriteRequest) (*resourcev1.WriteResponse, error)) *ResourceServiceServer_Write_Call {
	_c.Call.Return(run)
	return _c
}

// WriteStatus provides a mock function with given fields: _a0, _a1
func (_m *ResourceServiceServer) WriteStatus(_a0 context.Context, _a1 *resourcev1.WriteStatusRequest) (*resourcev1.WriteStatusResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *resourcev1.WriteStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourcev1.WriteStatusRequest) (*resourcev1.WriteStatusResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourcev1.WriteStatusRequest) *resourcev1.WriteStatusResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcev1.WriteStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourcev1.WriteStatusRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceServiceServer_WriteStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteStatus'
type ResourceServiceServer_WriteStatus_Call struct {
	*mock.Call
}

// WriteStatus is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *resourcev1.WriteStatusRequest
func (_e *ResourceServiceServer_Expecter) WriteStatus(_a0 interface{}, _a1 interface{}) *ResourceServiceServer_WriteStatus_Call {
	return &ResourceServiceServer_WriteStatus_Call{Call: _e.mock.On("WriteStatus", _a0, _a1)}
}

func (_c *ResourceServiceServer_WriteStatus_Call) Run(run func(_a0 context.Context, _a1 *resourcev1.WriteStatusRequest)) *ResourceServiceServer_WriteStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*resourcev1.WriteStatusRequest))
	})
	return _c
}

func (_c *ResourceServiceServer_WriteStatus_Call) Return(_a0 *resourcev1.WriteStatusResponse, _a1 error) *ResourceServiceServer_WriteStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceServiceServer_WriteStatus_Call) RunAndReturn(run func(context.Context, *resourcev1.WriteStatusRequest) (*resourcev1.WriteStatusResponse, error)) *ResourceServiceServer_WriteStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewResourceServiceServer creates a new instance of ResourceServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResourceServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *ResourceServiceServer {
	mock := &ResourceServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
