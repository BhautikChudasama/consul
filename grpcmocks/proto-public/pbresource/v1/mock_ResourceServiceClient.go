// Code generated by mockery v2.37.1. DO NOT EDIT.

package mockresourcev1

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	resourcev1 "github.com/hashicorp/consul/proto-public/pbresource/v1"
)

// ResourceServiceClient is an autogenerated mock type for the ResourceServiceClient type
type ResourceServiceClient struct {
	mock.Mock
}

type ResourceServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *ResourceServiceClient) EXPECT() *ResourceServiceClient_Expecter {
	return &ResourceServiceClient_Expecter{mock: &_m.Mock}
}

// Delete provides a mock function with given fields: ctx, in, opts
func (_m *ResourceServiceClient) Delete(ctx context.Context, in *resourcev1.DeleteRequest, opts ...grpc.CallOption) (*resourcev1.DeleteResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *resourcev1.DeleteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourcev1.DeleteRequest, ...grpc.CallOption) (*resourcev1.DeleteResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourcev1.DeleteRequest, ...grpc.CallOption) *resourcev1.DeleteResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcev1.DeleteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourcev1.DeleteRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceServiceClient_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type ResourceServiceClient_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - in *resourcev1.DeleteRequest
//   - opts ...grpc.CallOption
func (_e *ResourceServiceClient_Expecter) Delete(ctx interface{}, in interface{}, opts ...interface{}) *ResourceServiceClient_Delete_Call {
	return &ResourceServiceClient_Delete_Call{Call: _e.mock.On("Delete",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ResourceServiceClient_Delete_Call) Run(run func(ctx context.Context, in *resourcev1.DeleteRequest, opts ...grpc.CallOption)) *ResourceServiceClient_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*resourcev1.DeleteRequest), variadicArgs...)
	})
	return _c
}

func (_c *ResourceServiceClient_Delete_Call) Return(_a0 *resourcev1.DeleteResponse, _a1 error) *ResourceServiceClient_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceServiceClient_Delete_Call) RunAndReturn(run func(context.Context, *resourcev1.DeleteRequest, ...grpc.CallOption) (*resourcev1.DeleteResponse, error)) *ResourceServiceClient_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, in, opts
func (_m *ResourceServiceClient) List(ctx context.Context, in *resourcev1.ListRequest, opts ...grpc.CallOption) (*resourcev1.ListResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *resourcev1.ListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourcev1.ListRequest, ...grpc.CallOption) (*resourcev1.ListResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourcev1.ListRequest, ...grpc.CallOption) *resourcev1.ListResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcev1.ListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourcev1.ListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceServiceClient_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type ResourceServiceClient_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - in *resourcev1.ListRequest
//   - opts ...grpc.CallOption
func (_e *ResourceServiceClient_Expecter) List(ctx interface{}, in interface{}, opts ...interface{}) *ResourceServiceClient_List_Call {
	return &ResourceServiceClient_List_Call{Call: _e.mock.On("List",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ResourceServiceClient_List_Call) Run(run func(ctx context.Context, in *resourcev1.ListRequest, opts ...grpc.CallOption)) *ResourceServiceClient_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*resourcev1.ListRequest), variadicArgs...)
	})
	return _c
}

func (_c *ResourceServiceClient_List_Call) Return(_a0 *resourcev1.ListResponse, _a1 error) *ResourceServiceClient_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceServiceClient_List_Call) RunAndReturn(run func(context.Context, *resourcev1.ListRequest, ...grpc.CallOption) (*resourcev1.ListResponse, error)) *ResourceServiceClient_List_Call {
	_c.Call.Return(run)
	return _c
}

// ListByOwner provides a mock function with given fields: ctx, in, opts
func (_m *ResourceServiceClient) ListByOwner(ctx context.Context, in *resourcev1.ListByOwnerRequest, opts ...grpc.CallOption) (*resourcev1.ListByOwnerResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *resourcev1.ListByOwnerResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourcev1.ListByOwnerRequest, ...grpc.CallOption) (*resourcev1.ListByOwnerResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourcev1.ListByOwnerRequest, ...grpc.CallOption) *resourcev1.ListByOwnerResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcev1.ListByOwnerResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourcev1.ListByOwnerRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceServiceClient_ListByOwner_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListByOwner'
type ResourceServiceClient_ListByOwner_Call struct {
	*mock.Call
}

// ListByOwner is a helper method to define mock.On call
//   - ctx context.Context
//   - in *resourcev1.ListByOwnerRequest
//   - opts ...grpc.CallOption
func (_e *ResourceServiceClient_Expecter) ListByOwner(ctx interface{}, in interface{}, opts ...interface{}) *ResourceServiceClient_ListByOwner_Call {
	return &ResourceServiceClient_ListByOwner_Call{Call: _e.mock.On("ListByOwner",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ResourceServiceClient_ListByOwner_Call) Run(run func(ctx context.Context, in *resourcev1.ListByOwnerRequest, opts ...grpc.CallOption)) *ResourceServiceClient_ListByOwner_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*resourcev1.ListByOwnerRequest), variadicArgs...)
	})
	return _c
}

func (_c *ResourceServiceClient_ListByOwner_Call) Return(_a0 *resourcev1.ListByOwnerResponse, _a1 error) *ResourceServiceClient_ListByOwner_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceServiceClient_ListByOwner_Call) RunAndReturn(run func(context.Context, *resourcev1.ListByOwnerRequest, ...grpc.CallOption) (*resourcev1.ListByOwnerResponse, error)) *ResourceServiceClient_ListByOwner_Call {
	_c.Call.Return(run)
	return _c
}

// MutateAndValidate provides a mock function with given fields: ctx, in, opts
func (_m *ResourceServiceClient) MutateAndValidate(ctx context.Context, in *resourcev1.MutateAndValidateRequest, opts ...grpc.CallOption) (*resourcev1.MutateAndValidateResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *resourcev1.MutateAndValidateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourcev1.MutateAndValidateRequest, ...grpc.CallOption) (*resourcev1.MutateAndValidateResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourcev1.MutateAndValidateRequest, ...grpc.CallOption) *resourcev1.MutateAndValidateResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcev1.MutateAndValidateResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourcev1.MutateAndValidateRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceServiceClient_MutateAndValidate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MutateAndValidate'
type ResourceServiceClient_MutateAndValidate_Call struct {
	*mock.Call
}

// MutateAndValidate is a helper method to define mock.On call
//   - ctx context.Context
//   - in *resourcev1.MutateAndValidateRequest
//   - opts ...grpc.CallOption
func (_e *ResourceServiceClient_Expecter) MutateAndValidate(ctx interface{}, in interface{}, opts ...interface{}) *ResourceServiceClient_MutateAndValidate_Call {
	return &ResourceServiceClient_MutateAndValidate_Call{Call: _e.mock.On("MutateAndValidate",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ResourceServiceClient_MutateAndValidate_Call) Run(run func(ctx context.Context, in *resourcev1.MutateAndValidateRequest, opts ...grpc.CallOption)) *ResourceServiceClient_MutateAndValidate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*resourcev1.MutateAndValidateRequest), variadicArgs...)
	})
	return _c
}

func (_c *ResourceServiceClient_MutateAndValidate_Call) Return(_a0 *resourcev1.MutateAndValidateResponse, _a1 error) *ResourceServiceClient_MutateAndValidate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceServiceClient_MutateAndValidate_Call) RunAndReturn(run func(context.Context, *resourcev1.MutateAndValidateRequest, ...grpc.CallOption) (*resourcev1.MutateAndValidateResponse, error)) *ResourceServiceClient_MutateAndValidate_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: ctx, in, opts
func (_m *ResourceServiceClient) Read(ctx context.Context, in *resourcev1.ReadRequest, opts ...grpc.CallOption) (*resourcev1.ReadResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *resourcev1.ReadResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourcev1.ReadRequest, ...grpc.CallOption) (*resourcev1.ReadResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourcev1.ReadRequest, ...grpc.CallOption) *resourcev1.ReadResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcev1.ReadResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourcev1.ReadRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceServiceClient_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type ResourceServiceClient_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - ctx context.Context
//   - in *resourcev1.ReadRequest
//   - opts ...grpc.CallOption
func (_e *ResourceServiceClient_Expecter) Read(ctx interface{}, in interface{}, opts ...interface{}) *ResourceServiceClient_Read_Call {
	return &ResourceServiceClient_Read_Call{Call: _e.mock.On("Read",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ResourceServiceClient_Read_Call) Run(run func(ctx context.Context, in *resourcev1.ReadRequest, opts ...grpc.CallOption)) *ResourceServiceClient_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*resourcev1.ReadRequest), variadicArgs...)
	})
	return _c
}

func (_c *ResourceServiceClient_Read_Call) Return(_a0 *resourcev1.ReadResponse, _a1 error) *ResourceServiceClient_Read_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceServiceClient_Read_Call) RunAndReturn(run func(context.Context, *resourcev1.ReadRequest, ...grpc.CallOption) (*resourcev1.ReadResponse, error)) *ResourceServiceClient_Read_Call {
	_c.Call.Return(run)
	return _c
}

// WatchList provides a mock function with given fields: ctx, in, opts
func (_m *ResourceServiceClient) WatchList(ctx context.Context, in *resourcev1.WatchListRequest, opts ...grpc.CallOption) (resourcev1.ResourceService_WatchListClient, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 resourcev1.ResourceService_WatchListClient
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourcev1.WatchListRequest, ...grpc.CallOption) (resourcev1.ResourceService_WatchListClient, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourcev1.WatchListRequest, ...grpc.CallOption) resourcev1.ResourceService_WatchListClient); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(resourcev1.ResourceService_WatchListClient)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourcev1.WatchListRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceServiceClient_WatchList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WatchList'
type ResourceServiceClient_WatchList_Call struct {
	*mock.Call
}

// WatchList is a helper method to define mock.On call
//   - ctx context.Context
//   - in *resourcev1.WatchListRequest
//   - opts ...grpc.CallOption
func (_e *ResourceServiceClient_Expecter) WatchList(ctx interface{}, in interface{}, opts ...interface{}) *ResourceServiceClient_WatchList_Call {
	return &ResourceServiceClient_WatchList_Call{Call: _e.mock.On("WatchList",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ResourceServiceClient_WatchList_Call) Run(run func(ctx context.Context, in *resourcev1.WatchListRequest, opts ...grpc.CallOption)) *ResourceServiceClient_WatchList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*resourcev1.WatchListRequest), variadicArgs...)
	})
	return _c
}

func (_c *ResourceServiceClient_WatchList_Call) Return(_a0 resourcev1.ResourceService_WatchListClient, _a1 error) *ResourceServiceClient_WatchList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceServiceClient_WatchList_Call) RunAndReturn(run func(context.Context, *resourcev1.WatchListRequest, ...grpc.CallOption) (resourcev1.ResourceService_WatchListClient, error)) *ResourceServiceClient_WatchList_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function with given fields: ctx, in, opts
func (_m *ResourceServiceClient) Write(ctx context.Context, in *resourcev1.WriteRequest, opts ...grpc.CallOption) (*resourcev1.WriteResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *resourcev1.WriteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourcev1.WriteRequest, ...grpc.CallOption) (*resourcev1.WriteResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourcev1.WriteRequest, ...grpc.CallOption) *resourcev1.WriteResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcev1.WriteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourcev1.WriteRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceServiceClient_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type ResourceServiceClient_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - ctx context.Context
//   - in *resourcev1.WriteRequest
//   - opts ...grpc.CallOption
func (_e *ResourceServiceClient_Expecter) Write(ctx interface{}, in interface{}, opts ...interface{}) *ResourceServiceClient_Write_Call {
	return &ResourceServiceClient_Write_Call{Call: _e.mock.On("Write",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ResourceServiceClient_Write_Call) Run(run func(ctx context.Context, in *resourcev1.WriteRequest, opts ...grpc.CallOption)) *ResourceServiceClient_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*resourcev1.WriteRequest), variadicArgs...)
	})
	return _c
}

func (_c *ResourceServiceClient_Write_Call) Return(_a0 *resourcev1.WriteResponse, _a1 error) *ResourceServiceClient_Write_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceServiceClient_Write_Call) RunAndReturn(run func(context.Context, *resourcev1.WriteRequest, ...grpc.CallOption) (*resourcev1.WriteResponse, error)) *ResourceServiceClient_Write_Call {
	_c.Call.Return(run)
	return _c
}

// WriteStatus provides a mock function with given fields: ctx, in, opts
func (_m *ResourceServiceClient) WriteStatus(ctx context.Context, in *resourcev1.WriteStatusRequest, opts ...grpc.CallOption) (*resourcev1.WriteStatusResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *resourcev1.WriteStatusResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *resourcev1.WriteStatusRequest, ...grpc.CallOption) (*resourcev1.WriteStatusResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *resourcev1.WriteStatusRequest, ...grpc.CallOption) *resourcev1.WriteStatusResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*resourcev1.WriteStatusResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *resourcev1.WriteStatusRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourceServiceClient_WriteStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteStatus'
type ResourceServiceClient_WriteStatus_Call struct {
	*mock.Call
}

// WriteStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - in *resourcev1.WriteStatusRequest
//   - opts ...grpc.CallOption
func (_e *ResourceServiceClient_Expecter) WriteStatus(ctx interface{}, in interface{}, opts ...interface{}) *ResourceServiceClient_WriteStatus_Call {
	return &ResourceServiceClient_WriteStatus_Call{Call: _e.mock.On("WriteStatus",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *ResourceServiceClient_WriteStatus_Call) Run(run func(ctx context.Context, in *resourcev1.WriteStatusRequest, opts ...grpc.CallOption)) *ResourceServiceClient_WriteStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*resourcev1.WriteStatusRequest), variadicArgs...)
	})
	return _c
}

func (_c *ResourceServiceClient_WriteStatus_Call) Return(_a0 *resourcev1.WriteStatusResponse, _a1 error) *ResourceServiceClient_WriteStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResourceServiceClient_WriteStatus_Call) RunAndReturn(run func(context.Context, *resourcev1.WriteStatusRequest, ...grpc.CallOption) (*resourcev1.WriteStatusResponse, error)) *ResourceServiceClient_WriteStatus_Call {
	_c.Call.Return(run)
	return _c
}

// NewResourceServiceClient creates a new instance of ResourceServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResourceServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *ResourceServiceClient {
	mock := &ResourceServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
