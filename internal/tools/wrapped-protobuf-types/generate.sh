#!/usr/bin/env bash
# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: MPL-2.0

unset CDPATH

set -euo pipefail

# NOTE: this script could be made more generic if folks find it useful.

if [[ $# -lt 2 ]]; then
    echo "expected at least 2 args" >&2
    exit 1
fi

# first argument is output path
output="$1"
shift

if [[ "$output" != *.go ]]; then
    echo "output file should end with a .go suffix" >&2
    exit 2
fi

cat > "${output}.tmp" <<EOF
// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0
package wrappedtypes

// Code generated by wrapped-protobuf-types/generate.sh. DO NOT EDIT.

import (
	"github.com/hashicorp/consul/internal/resource"
	pbcatalog "github.com/hashicorp/consul/proto-public/pbcatalog/v1alpha1"
	pbmesh "github.com/hashicorp/consul/proto-public/pbmesh/v1alpha1"
	"github.com/hashicorp/consul/proto-public/pbresource"
)

// Avoid unused imports in generated code.
var _ *pbmesh.ParentReference
var _ *pbcatalog.Service

EOF

# each argument is the name of a protobuf type
for typ in "$@"; do
    IFS=. read pkg message <<<"${typ}"
    if [[ -z "$pkg" ]] || [[ -z "$message" ]]; then
        echo "input should be a list of 'pkg.Name' strings" >&2
        exit 1
    fi
    iface="Wrapped"
    if [[ "$message" = *Route ]]; then
        iface="WrappedRoute"
    fi
    ######################
    cat >> "${output}.tmp" <<EOF
var _ ${iface} = (*${message})(nil)

type ${message} struct {
	Resource *pbresource.Resource
	*${pkg}.${message}
}

func New${message}(dec *resource.DecodedResource[${pkg}.${message}, *${pkg}.${message}]) *${message} {
	if dec == nil {
		return nil
	}
	return &${message}{
		Resource:  dec.Resource,
		${message}: dec.Data,
	}
}

func (r *${message}) GetResource() *pbresource.Resource { return r.Resource }

func (r *${message}) ToDecodedResource() *resource.DecodedResource[${pkg}.${message}, *${pkg}.${message}] {
	if r == nil {
		return nil
	}
	return &resource.DecodedResource[${pkg}.${message}, *${pkg}.${message}]{
		Resource: r.Resource,
		Data:     r.${message},
	}
}

EOF
done

mv -f "${output}.tmp" "${output}"
gofmt -s -w "${output}"
