// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

syntax = "proto3";

// For more information, see: https://github.com/hashicorp/consul/tree/main/docs/resources
package hashicorp.consul.resource;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";

// Type describes a resource's type. It follows the GVK (Group Version Kind)
// [pattern](https://book.kubebuilder.io/cronjob-tutorial/gvks.html) established
// by Kubernetes.
message Type {
  // Group describes the area of functionality to which this resource type
  // relates (e.g. "catalog", "authorization").
  string group = 1;

  // GroupVersion is incremented when sweeping or backward-incompatible changes
  // are made to the group's resource types.
  string group_version = 2;

  // Kind identifies the specific resource type within the group.
  string kind = 3;
}

// Tenancy describes the tenancy units in which the resource resides.
message Tenancy {
  // Partition is the topmost administrative boundary within a cluster.
  // https://developer.hashicorp.com/consul/docs/enterprise/admin-partitions
  //
  // When using the List and WatchList endpoints, provide the wildcard value "*"
  // to list resources across all partitions.
  string partition = 1;

  // Namespace further isolates resources within a partition.
  // https://developer.hashicorp.com/consul/docs/enterprise/namespaces
  //
  // When using the List and WatchList endpoints, provide the wildcard value "*"
  // to list resources across all namespaces.
  string namespace = 2;

  // PeerName identifies which peer the resource is imported from.
  // https://developer.hashicorp.com/consul/docs/connect/cluster-peering
  //
  // When using the List and WatchList endpoints, provide the wildcard value "*"
  // to list resources across all peers.
  string peer_name = 3;
}

// ID uniquely identifies a resource.
message ID {
  // Uid is the unique internal identifier we gave to the resource.
  //
  // It is primarily used to tell the difference between the current resource
  // and previous deleted resources with the same user-given name.
  //
  // Concretely, Uid is a [ULID](https://github.com/ulid/spec) and you can treat
  // its timestamp component as the resource's creation time.
  string uid = 1;

  // Name is the user-given name of the resource (e.g. the "billing" service).
  string name = 2;

  // Type identifies the resource's type.
  Type type = 3;

  // Tenancy identifies the tenancy units (i.e. partition, namespace) in which
  // the resource resides.
  Tenancy tenancy = 4;
}

// Resource describes a resource of a known type managed by Consul.
message Resource {
  // ID uniquely identifies the resource.
  ID id = 1;

  // Owner (optionally) describes which resource "owns" this resource, it is
  // immutable and can only be set on resource creation. Owned resources will
  // be automatically deleted when their owner is deleted.
  ID owner = 2;

  // Version is the low-level version identifier used by the storage backend
  // in CAS (Compare-And-Swap) operations. It will change when the resource is
  // modified in any way, including status updates.
  //
  // When calling the Write endpoint, providing a non-blank version will perform
  // a CAS (Compare-And-Swap) write, which will result in an Aborted error code
  // if the given version doesn't match what is stored.
  string version = 3;

  // Generation is incremented whenever the resource's content (i.e. not its
  // status) is modified. You can think of it as being the "user version".
  //
  // Concretely, Generation is a [ULID](https://github.com/ulid/spec) and you
  // can treat its timestamp component as the resource's modification time.
  string generation = 4;

  // Metadata contains key/value pairs of arbitrary metadata about the resource.
  map<string, string> metadata = 5;

  // Status is used by controllers to communicate the result of attempting to
  // reconcile and apply the resource (e.g. surface semantic validation errors)
  // with users and other controllers. Each status is identified by a unique key
  // and should only ever be updated by one controller.
  //
  // Status can only be updated via the WriteStatus endpoint. Attempting to do
  // so via the Write endpoint will result in an InvalidArgument error code.
  map<string, Status> status = 6;

  // Data contains the resource's type-specific content.
  google.protobuf.Any data = 7;
}

// Status is used by controllers to communicate the result of attempting to
// reconcile and apply a resource (e.g. surface semantic validation errors)
// with users and other controllers.
message Status {
  // ObservedGeneration identifies which generation of a resource this status
  // related to. It can be used to determine whether the current generation of
  // a resource has been reconciled.
  string observed_generation = 1;

  // Conditions contains a set of discreet observations about the resource in
  // relation to the current state of the system (e.g. it is semantically valid).
  repeated Condition conditions = 2;

  // UpdatedAt is the time at which the status was last written.
  google.protobuf.Timestamp updated_at = 3;
}

// Condition represents a discreet observation about a resource in relation to
// the current state of the system.
//
// It is heavily inspired by Kubernetes' [conditions](https://bit.ly/3H9Y6IK)
// and the Gateway API [types and reasons](https://bit.ly/3n2PPiP).
message Condition {
  // State represents the state of the condition (i.e. true/false/unknown).
  enum State {
    // STATE_UNKNOWN means that the state of the condition is unknown.
    //
    // buf:lint:ignore ENUM_ZERO_VALUE_SUFFIX
    STATE_UNKNOWN = 0;

    // STATE_TRUE means that the state of the condition is true.
    STATE_TRUE = 1;

    // STATE_FALSE means that the state of the condition is false.
    STATE_FALSE = 2;
  }

  // Type identifies the type of condition (e.g. "Invalid", "ResolvedRefs").
  string type = 1;

  // State represents the state of the condition (i.e. true/false/unknown).
  State state = 2;

  // Reason provides more machine-readable details about the condition (e.g.
  // "InvalidProtocol").
  string reason = 3;

  // Message contains a human-friendly description of the status.
  string message = 4;

  // Resource identifies which resource this condition relates to, when it is
  // not the core resource itself.
  Reference resource = 5;
}

// Reference identifies which resource a condition relates to, when it is not
// the core resource itself.
message Reference {
  // Type identifies the resource's type.
  Type type = 1;

  // Tenancy identifies the tenancy units (i.e. partition, namespace) in which
  // the resource resides.
  Tenancy tenancy = 2;

  // Name is the user-given name of the resource (e.g. the "billing" service).
  string name = 3;

  // Section identifies which part of the resource the condition relates to.
  string section = 4;
}
