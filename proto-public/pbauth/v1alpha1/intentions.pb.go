// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: pbauth/v1alpha1/intentions.proto

package authv1alpha1

import (
	pbresource "github.com/hashicorp/consul/proto-public/pbresource"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Action int32

const (
	Action_ACTION_ALLOW Action = 0
	Action_ACTION_DENY  Action = 1
)

// Enum value maps for Action.
var (
	Action_name = map[int32]string{
		0: "ACTION_ALLOW",
		1: "ACTION_DENY",
	}
	Action_value = map[string]int32{
		"ACTION_ALLOW": 0,
		"ACTION_DENY":  1,
	}
)

func (x Action) Enum() *Action {
	p := new(Action)
	*p = x
	return p
}

func (x Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Action) Descriptor() protoreflect.EnumDescriptor {
	return file_pbauth_v1alpha1_intentions_proto_enumTypes[0].Descriptor()
}

func (Action) Type() protoreflect.EnumType {
	return &file_pbauth_v1alpha1_intentions_proto_enumTypes[0]
}

func (x Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Action.Descriptor instead.
func (Action) EnumDescriptor() ([]byte, []int) {
	return file_pbauth_v1alpha1_intentions_proto_rawDescGZIP(), []int{0}
}

type Intentions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// destination is a reference to a specific WorkloadIdentity resource.
	// This must point to a specific resource. To apply intentions to all identities
	// within a namespace, use NamespacedIntentions, and to apply intentions rules to all identities within
	// a partition, use PartitionedIntentions.
	Destination *pbresource.Reference `protobuf:"bytes,1,opt,name=destination,proto3" json:"destination,omitempty"`
	// Action can be either allow or deny for the entire object.
	//
	// If action is allow,
	// we will allow the connection if one of the rules in Rules matches, in other words, we will deny
	// all requests except for the ones that match Rules. If Consul is in default allow mode, then allow
	// actions have no effect without a deny permission as everything is allowed by default.
	//
	// If action is deny,
	// we will deny the connection if one of the rules in Rules match, in other words,
	// we will allow all requests except for the ones that match Rules.
	Action Action `protobuf:"varint,2,opt,name=action,proto3,enum=hashicorp.consul.auth.v1alpha1.Action" json:"action,omitempty"`
	// rules is a list of rules in this Intention. Rules are evaluated in order that they are provided
	// and are applied using OR semantics.
	Rules []*Rule `protobuf:"bytes,3,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *Intentions) Reset() {
	*x = Intentions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbauth_v1alpha1_intentions_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Intentions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Intentions) ProtoMessage() {}

func (x *Intentions) ProtoReflect() protoreflect.Message {
	mi := &file_pbauth_v1alpha1_intentions_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Intentions.ProtoReflect.Descriptor instead.
func (*Intentions) Descriptor() ([]byte, []int) {
	return file_pbauth_v1alpha1_intentions_proto_rawDescGZIP(), []int{0}
}

func (x *Intentions) GetDestination() *pbresource.Reference {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *Intentions) GetAction() Action {
	if x != nil {
		return x.Action
	}
	return Action_ACTION_ALLOW
}

func (x *Intentions) GetRules() []*Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

type Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sources is a list of sources in this intention. Different sources will be OR'ed together
	// and will be evaluated in order to find a match. For example, if a namespace reference source
	// is provided before the specific identity from the same source namespace, the namespace reference will
	// be matched first because it's provided before the the specific identity.
	Sources []*Source `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
	// permissions is a list of permissions to apply for matching sources in this Rule. Permissions
	// are applied using OR semantics.
	Permissions []*Permission `protobuf:"bytes,2,rep,name=permissions,proto3" json:"permissions,omitempty"`
}

func (x *Rule) Reset() {
	*x = Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbauth_v1alpha1_intentions_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_pbauth_v1alpha1_intentions_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_pbauth_v1alpha1_intentions_proto_rawDescGZIP(), []int{1}
}

func (x *Rule) GetSources() []*Source {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *Rule) GetPermissions() []*Permission {
	if x != nil {
		return x.Permissions
	}
	return nil
}

// A source of intention can be either:
//   - an identity within a namespace and partition
//   - an identity within a namespace and peer
//   - an identity within a namespace and sameness group
//   - all identities within a namespace
//   - all identities within a partition
//   - all identities within a peer
//   - all identities within a sameness group
type Source struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SourceRef:
	//
	//	*Source_IdentityRef
	//	*Source_NamespaceRef
	//	*Source_PartitionRef
	//	*Source_PeerRef
	//	*Source_SamenessGroupRef
	//	*Source_Not
	SourceRef isSource_SourceRef `protobuf_oneof:"source_ref"`
}

func (x *Source) Reset() {
	*x = Source{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbauth_v1alpha1_intentions_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Source) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Source) ProtoMessage() {}

func (x *Source) ProtoReflect() protoreflect.Message {
	mi := &file_pbauth_v1alpha1_intentions_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Source.ProtoReflect.Descriptor instead.
func (*Source) Descriptor() ([]byte, []int) {
	return file_pbauth_v1alpha1_intentions_proto_rawDescGZIP(), []int{2}
}

func (m *Source) GetSourceRef() isSource_SourceRef {
	if m != nil {
		return m.SourceRef
	}
	return nil
}

func (x *Source) GetIdentityRef() *IdentityRef {
	if x, ok := x.GetSourceRef().(*Source_IdentityRef); ok {
		return x.IdentityRef
	}
	return nil
}

func (x *Source) GetNamespaceRef() *NamespaceRef {
	if x, ok := x.GetSourceRef().(*Source_NamespaceRef); ok {
		return x.NamespaceRef
	}
	return nil
}

func (x *Source) GetPartitionRef() string {
	if x, ok := x.GetSourceRef().(*Source_PartitionRef); ok {
		return x.PartitionRef
	}
	return ""
}

func (x *Source) GetPeerRef() string {
	if x, ok := x.GetSourceRef().(*Source_PeerRef); ok {
		return x.PeerRef
	}
	return ""
}

func (x *Source) GetSamenessGroupRef() string {
	if x, ok := x.GetSourceRef().(*Source_SamenessGroupRef); ok {
		return x.SamenessGroupRef
	}
	return ""
}

func (x *Source) GetNot() *Source {
	if x, ok := x.GetSourceRef().(*Source_Not); ok {
		return x.Not
	}
	return nil
}

type isSource_SourceRef interface {
	isSource_SourceRef()
}

type Source_IdentityRef struct {
	// identity_ref can be used when the source has a specific identity associated with it.
	IdentityRef *IdentityRef `protobuf:"bytes,1,opt,name=identity_ref,json=identityRef,proto3,oneof"`
}

type Source_NamespaceRef struct {
	// namespace_ref can be used to say that the source is all identities within a namespace.
	NamespaceRef *NamespaceRef `protobuf:"bytes,2,opt,name=namespace_ref,json=namespaceRef,proto3,oneof"`
}

type Source_PartitionRef struct {
	// partition_ref can be used to say that the source is all identities within a partition.
	PartitionRef string `protobuf:"bytes,3,opt,name=partition_ref,json=partitionRef,proto3,oneof"`
}

type Source_PeerRef struct {
	// peer_ref should can be used to say that the source is all identities within a peer.
	PeerRef string `protobuf:"bytes,4,opt,name=peer_ref,json=peerRef,proto3,oneof"`
}

type Source_SamenessGroupRef struct {
	// sameness_group_ref can be used to say that the source is all identities within a sameness group.
	SamenessGroupRef string `protobuf:"bytes,5,opt,name=sameness_group_ref,json=samenessGroupRef,proto3,oneof"`
}

type Source_Not struct {
	// not can be used to negate the source. For example, to say that the source is not a certain identity.
	// It cannot reference another NotRef and can only be one of the other reference types. This will be enforced
	// by the validation hook of this resource.
	Not *Source `protobuf:"bytes,6,opt,name=not,proto3,oneof"`
}

func (*Source_IdentityRef) isSource_SourceRef() {}

func (*Source_NamespaceRef) isSource_SourceRef() {}

func (*Source_PartitionRef) isSource_SourceRef() {}

func (*Source_PeerRef) isSource_SourceRef() {}

func (*Source_SamenessGroupRef) isSource_SourceRef() {}

func (*Source_Not) isSource_SourceRef() {}

// IdentityRef is reference to a specific identity belonging to a namespace and
// a partition, a peer, or a sameness group.
type IdentityRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Types that are assignable to PeerOrPartitionOrSg:
	//
	//	*IdentityRef_Peer
	//	*IdentityRef_Partition
	//	*IdentityRef_SamenessGroup
	PeerOrPartitionOrSg isIdentityRef_PeerOrPartitionOrSg `protobuf_oneof:"peer_or_partition_or_sg"`
}

func (x *IdentityRef) Reset() {
	*x = IdentityRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbauth_v1alpha1_intentions_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityRef) ProtoMessage() {}

func (x *IdentityRef) ProtoReflect() protoreflect.Message {
	mi := &file_pbauth_v1alpha1_intentions_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityRef.ProtoReflect.Descriptor instead.
func (*IdentityRef) Descriptor() ([]byte, []int) {
	return file_pbauth_v1alpha1_intentions_proto_rawDescGZIP(), []int{3}
}

func (x *IdentityRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *IdentityRef) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (m *IdentityRef) GetPeerOrPartitionOrSg() isIdentityRef_PeerOrPartitionOrSg {
	if m != nil {
		return m.PeerOrPartitionOrSg
	}
	return nil
}

func (x *IdentityRef) GetPeer() string {
	if x, ok := x.GetPeerOrPartitionOrSg().(*IdentityRef_Peer); ok {
		return x.Peer
	}
	return ""
}

func (x *IdentityRef) GetPartition() string {
	if x, ok := x.GetPeerOrPartitionOrSg().(*IdentityRef_Partition); ok {
		return x.Partition
	}
	return ""
}

func (x *IdentityRef) GetSamenessGroup() string {
	if x, ok := x.GetPeerOrPartitionOrSg().(*IdentityRef_SamenessGroup); ok {
		return x.SamenessGroup
	}
	return ""
}

type isIdentityRef_PeerOrPartitionOrSg interface {
	isIdentityRef_PeerOrPartitionOrSg()
}

type IdentityRef_Peer struct {
	Peer string `protobuf:"bytes,3,opt,name=peer,proto3,oneof"`
}

type IdentityRef_Partition struct {
	Partition string `protobuf:"bytes,4,opt,name=partition,proto3,oneof"`
}

type IdentityRef_SamenessGroup struct {
	SamenessGroup string `protobuf:"bytes,5,opt,name=sameness_group,json=samenessGroup,proto3,oneof"`
}

func (*IdentityRef_Peer) isIdentityRef_PeerOrPartitionOrSg() {}

func (*IdentityRef_Partition) isIdentityRef_PeerOrPartitionOrSg() {}

func (*IdentityRef_SamenessGroup) isIdentityRef_PeerOrPartitionOrSg() {}

// NamespaceRef is a reference to a namespace.
type NamespaceRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace string `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	// Types that are assignable to PeerOrPartitionOrSg:
	//
	//	*NamespaceRef_Peer
	//	*NamespaceRef_Partition
	//	*NamespaceRef_SamenessGroup
	PeerOrPartitionOrSg isNamespaceRef_PeerOrPartitionOrSg `protobuf_oneof:"peer_or_partition_or_sg"`
}

func (x *NamespaceRef) Reset() {
	*x = NamespaceRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbauth_v1alpha1_intentions_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceRef) ProtoMessage() {}

func (x *NamespaceRef) ProtoReflect() protoreflect.Message {
	mi := &file_pbauth_v1alpha1_intentions_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceRef.ProtoReflect.Descriptor instead.
func (*NamespaceRef) Descriptor() ([]byte, []int) {
	return file_pbauth_v1alpha1_intentions_proto_rawDescGZIP(), []int{4}
}

func (x *NamespaceRef) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (m *NamespaceRef) GetPeerOrPartitionOrSg() isNamespaceRef_PeerOrPartitionOrSg {
	if m != nil {
		return m.PeerOrPartitionOrSg
	}
	return nil
}

func (x *NamespaceRef) GetPeer() string {
	if x, ok := x.GetPeerOrPartitionOrSg().(*NamespaceRef_Peer); ok {
		return x.Peer
	}
	return ""
}

func (x *NamespaceRef) GetPartition() string {
	if x, ok := x.GetPeerOrPartitionOrSg().(*NamespaceRef_Partition); ok {
		return x.Partition
	}
	return ""
}

func (x *NamespaceRef) GetSamenessGroup() string {
	if x, ok := x.GetPeerOrPartitionOrSg().(*NamespaceRef_SamenessGroup); ok {
		return x.SamenessGroup
	}
	return ""
}

type isNamespaceRef_PeerOrPartitionOrSg interface {
	isNamespaceRef_PeerOrPartitionOrSg()
}

type NamespaceRef_Peer struct {
	Peer string `protobuf:"bytes,3,opt,name=peer,proto3,oneof"`
}

type NamespaceRef_Partition struct {
	Partition string `protobuf:"bytes,4,opt,name=partition,proto3,oneof"`
}

type NamespaceRef_SamenessGroup struct {
	SamenessGroup string `protobuf:"bytes,5,opt,name=sameness_group,json=samenessGroup,proto3,oneof"`
}

func (*NamespaceRef_Peer) isNamespaceRef_PeerOrPartitionOrSg() {}

func (*NamespaceRef_Partition) isNamespaceRef_PeerOrPartitionOrSg() {}

func (*NamespaceRef_SamenessGroup) isNamespaceRef_PeerOrPartitionOrSg() {}

type NotRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to NotRef:
	//
	//	*NotRef_IdentityRef
	//	*NotRef_NamespaceRef
	//	*NotRef_PartitionRef
	//	*NotRef_PeerRef
	//	*NotRef_SamenessGroupRef
	NotRef isNotRef_NotRef `protobuf_oneof:"not_ref"`
}

func (x *NotRef) Reset() {
	*x = NotRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbauth_v1alpha1_intentions_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotRef) ProtoMessage() {}

func (x *NotRef) ProtoReflect() protoreflect.Message {
	mi := &file_pbauth_v1alpha1_intentions_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotRef.ProtoReflect.Descriptor instead.
func (*NotRef) Descriptor() ([]byte, []int) {
	return file_pbauth_v1alpha1_intentions_proto_rawDescGZIP(), []int{5}
}

func (m *NotRef) GetNotRef() isNotRef_NotRef {
	if m != nil {
		return m.NotRef
	}
	return nil
}

func (x *NotRef) GetIdentityRef() *IdentityRef {
	if x, ok := x.GetNotRef().(*NotRef_IdentityRef); ok {
		return x.IdentityRef
	}
	return nil
}

func (x *NotRef) GetNamespaceRef() *NamespaceRef {
	if x, ok := x.GetNotRef().(*NotRef_NamespaceRef); ok {
		return x.NamespaceRef
	}
	return nil
}

func (x *NotRef) GetPartitionRef() string {
	if x, ok := x.GetNotRef().(*NotRef_PartitionRef); ok {
		return x.PartitionRef
	}
	return ""
}

func (x *NotRef) GetPeerRef() string {
	if x, ok := x.GetNotRef().(*NotRef_PeerRef); ok {
		return x.PeerRef
	}
	return ""
}

func (x *NotRef) GetSamenessGroupRef() string {
	if x, ok := x.GetNotRef().(*NotRef_SamenessGroupRef); ok {
		return x.SamenessGroupRef
	}
	return ""
}

type isNotRef_NotRef interface {
	isNotRef_NotRef()
}

type NotRef_IdentityRef struct {
	// identity_ref can be used when the source has a specific identity associated with it.
	IdentityRef *IdentityRef `protobuf:"bytes,1,opt,name=identity_ref,json=identityRef,proto3,oneof"`
}

type NotRef_NamespaceRef struct {
	// namespace_ref can be used to say that the source is all identities within a namespace.
	NamespaceRef *NamespaceRef `protobuf:"bytes,2,opt,name=namespace_ref,json=namespaceRef,proto3,oneof"`
}

type NotRef_PartitionRef struct {
	// partition_ref can be used to say that the source is all identities within a partition.
	PartitionRef string `protobuf:"bytes,3,opt,name=partition_ref,json=partitionRef,proto3,oneof"`
}

type NotRef_PeerRef struct {
	// peer_ref should can be used to say that the source is all identities within a peer.
	PeerRef string `protobuf:"bytes,4,opt,name=peer_ref,json=peerRef,proto3,oneof"`
}

type NotRef_SamenessGroupRef struct {
	// sameness_group_ref can be used to say that the source is all identities within a sameness group.
	SamenessGroupRef string `protobuf:"bytes,5,opt,name=sameness_group_ref,json=samenessGroupRef,proto3,oneof"`
}

func (*NotRef_IdentityRef) isNotRef_NotRef() {}

func (*NotRef_NamespaceRef) isNotRef_NotRef() {}

func (*NotRef_PartitionRef) isNotRef_NotRef() {}

func (*NotRef_PeerRef) isNotRef_NotRef() {}

func (*NotRef_SamenessGroupRef) isNotRef_NotRef() {}

type Permission struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Perm:
	//
	//	*Permission_Rule
	//	*Permission_NotRule
	Perm isPermission_Perm `protobuf_oneof:"perm"`
}

func (x *Permission) Reset() {
	*x = Permission{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbauth_v1alpha1_intentions_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Permission) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Permission) ProtoMessage() {}

func (x *Permission) ProtoReflect() protoreflect.Message {
	mi := &file_pbauth_v1alpha1_intentions_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Permission.ProtoReflect.Descriptor instead.
func (*Permission) Descriptor() ([]byte, []int) {
	return file_pbauth_v1alpha1_intentions_proto_rawDescGZIP(), []int{6}
}

func (m *Permission) GetPerm() isPermission_Perm {
	if m != nil {
		return m.Perm
	}
	return nil
}

func (x *Permission) GetRule() *PermissionRule {
	if x, ok := x.GetPerm().(*Permission_Rule); ok {
		return x.Rule
	}
	return nil
}

func (x *Permission) GetNotRule() *PermissionRule {
	if x, ok := x.GetPerm().(*Permission_NotRule); ok {
		return x.NotRule
	}
	return nil
}

type isPermission_Perm interface {
	isPermission_Perm()
}

type Permission_Rule struct {
	Rule *PermissionRule `protobuf:"bytes,1,opt,name=rule,proto3,oneof"`
}

type Permission_NotRule struct {
	NotRule *PermissionRule `protobuf:"bytes,2,opt,name=not_rule,json=notRule,proto3,oneof"`
}

func (*Permission_Rule) isPermission_Perm() {}

func (*Permission_NotRule) isPermission_Perm() {}

type PermissionRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// http specifies L7 permission rules. If destination_ports have non-L7 protocols,
	// this rule is not considered valid. These rules will be ignored for any ports with non-L7 protocols when action is ALLOW.
	// If action is DENY,
	Http *HTTPPermissionRules `protobuf:"bytes,1,opt,name=http,proto3" json:"http,omitempty"`
	// destination_ports is a list of ports to apply this rule to. The ports specified here
	// must be the ports used in the connection. The list
	// values are OR'ed together if multiple are provided. If no ports provided,
	// this rule will apply to all ports.
	DestinationPorts []uint32 `protobuf:"varint,2,rep,packed,name=destination_ports,json=destinationPorts,proto3" json:"destination_ports,omitempty"`
}

func (x *PermissionRule) Reset() {
	*x = PermissionRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbauth_v1alpha1_intentions_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionRule) ProtoMessage() {}

func (x *PermissionRule) ProtoReflect() protoreflect.Message {
	mi := &file_pbauth_v1alpha1_intentions_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionRule.ProtoReflect.Descriptor instead.
func (*PermissionRule) Descriptor() ([]byte, []int) {
	return file_pbauth_v1alpha1_intentions_proto_rawDescGZIP(), []int{7}
}

func (x *PermissionRule) GetHttp() *HTTPPermissionRules {
	if x != nil {
		return x.Http
	}
	return nil
}

func (x *PermissionRule) GetDestinationPorts() []uint32 {
	if x != nil {
		return x.DestinationPorts
	}
	return nil
}

type HTTPPermissionRules struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PathExact  string `protobuf:"bytes,1,opt,name=path_exact,json=pathExact,proto3" json:"path_exact,omitempty"`
	PathPrefix string `protobuf:"bytes,2,opt,name=path_prefix,json=pathPrefix,proto3" json:"path_prefix,omitempty"`
	PathRegex  string `protobuf:"bytes,3,opt,name=path_regex,json=pathRegex,proto3" json:"path_regex,omitempty"`
	// methods is the list of HTTP methods. If no methods are specified,
	// this rule will apply to all methods.
	Methods []string          `protobuf:"bytes,4,rep,name=methods,proto3" json:"methods,omitempty"`
	Header  *PermissionHeader `protobuf:"bytes,5,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *HTTPPermissionRules) Reset() {
	*x = HTTPPermissionRules{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbauth_v1alpha1_intentions_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HTTPPermissionRules) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HTTPPermissionRules) ProtoMessage() {}

func (x *HTTPPermissionRules) ProtoReflect() protoreflect.Message {
	mi := &file_pbauth_v1alpha1_intentions_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HTTPPermissionRules.ProtoReflect.Descriptor instead.
func (*HTTPPermissionRules) Descriptor() ([]byte, []int) {
	return file_pbauth_v1alpha1_intentions_proto_rawDescGZIP(), []int{8}
}

func (x *HTTPPermissionRules) GetPathExact() string {
	if x != nil {
		return x.PathExact
	}
	return ""
}

func (x *HTTPPermissionRules) GetPathPrefix() string {
	if x != nil {
		return x.PathPrefix
	}
	return ""
}

func (x *HTTPPermissionRules) GetPathRegex() string {
	if x != nil {
		return x.PathRegex
	}
	return ""
}

func (x *HTTPPermissionRules) GetMethods() []string {
	if x != nil {
		return x.Methods
	}
	return nil
}

func (x *HTTPPermissionRules) GetHeader() *PermissionHeader {
	if x != nil {
		return x.Header
	}
	return nil
}

type NotPermissionRule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NotPermission *PermissionRule `protobuf:"bytes,1,opt,name=not_permission,json=notPermission,proto3" json:"not_permission,omitempty"`
}

func (x *NotPermissionRule) Reset() {
	*x = NotPermissionRule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbauth_v1alpha1_intentions_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NotPermissionRule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NotPermissionRule) ProtoMessage() {}

func (x *NotPermissionRule) ProtoReflect() protoreflect.Message {
	mi := &file_pbauth_v1alpha1_intentions_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NotPermissionRule.ProtoReflect.Descriptor instead.
func (*NotPermissionRule) Descriptor() ([]byte, []int) {
	return file_pbauth_v1alpha1_intentions_proto_rawDescGZIP(), []int{9}
}

func (x *NotPermissionRule) GetNotPermission() *PermissionRule {
	if x != nil {
		return x.NotPermission
	}
	return nil
}

type PermissionHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Present bool   `protobuf:"varint,2,opt,name=present,proto3" json:"present,omitempty"`
	Exact   string `protobuf:"bytes,3,opt,name=exact,proto3" json:"exact,omitempty"`
	Prefix  string `protobuf:"bytes,4,opt,name=prefix,proto3" json:"prefix,omitempty"`
	Suffix  string `protobuf:"bytes,5,opt,name=suffix,proto3" json:"suffix,omitempty"`
	Regex   string `protobuf:"bytes,6,opt,name=regex,proto3" json:"regex,omitempty"`
	Invert  bool   `protobuf:"varint,7,opt,name=invert,proto3" json:"invert,omitempty"`
}

func (x *PermissionHeader) Reset() {
	*x = PermissionHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbauth_v1alpha1_intentions_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PermissionHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PermissionHeader) ProtoMessage() {}

func (x *PermissionHeader) ProtoReflect() protoreflect.Message {
	mi := &file_pbauth_v1alpha1_intentions_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PermissionHeader.ProtoReflect.Descriptor instead.
func (*PermissionHeader) Descriptor() ([]byte, []int) {
	return file_pbauth_v1alpha1_intentions_proto_rawDescGZIP(), []int{10}
}

func (x *PermissionHeader) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PermissionHeader) GetPresent() bool {
	if x != nil {
		return x.Present
	}
	return false
}

func (x *PermissionHeader) GetExact() string {
	if x != nil {
		return x.Exact
	}
	return ""
}

func (x *PermissionHeader) GetPrefix() string {
	if x != nil {
		return x.Prefix
	}
	return ""
}

func (x *PermissionHeader) GetSuffix() string {
	if x != nil {
		return x.Suffix
	}
	return ""
}

func (x *PermissionHeader) GetRegex() string {
	if x != nil {
		return x.Regex
	}
	return ""
}

func (x *PermissionHeader) GetInvert() bool {
	if x != nil {
		return x.Invert
	}
	return false
}

var File_pbauth_v1alpha1_intentions_proto protoreflect.FileDescriptor

var file_pbauth_v1alpha1_intentions_proto_rawDesc = []byte{
	0x0a, 0x20, 0x70, 0x62, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x69, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x1e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6c, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x31, 0x1a, 0x19, 0x70, 0x62, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd0, 0x01,
	0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x0b,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6c, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x26, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73,
	0x22, 0x96, 0x01, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x07, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x0b, 0x70,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6c, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xed, 0x02, 0x0a, 0x06, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x66, 0x12, 0x53, 0x0a, 0x0d, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e,
	0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c,
	0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x0c, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0x25, 0x0a, 0x0d, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x66, 0x12, 0x1b, 0x0a, 0x08, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x70, 0x65, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12,
	0x2e, 0x0a, 0x12, 0x73, 0x61, 0x6d, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x10, 0x73,
	0x61, 0x6d, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65, 0x66, 0x12,
	0x3a, 0x0a, 0x03, 0x6e, 0x6f, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x48, 0x00, 0x52, 0x03, 0x6e, 0x6f, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x22, 0xb9, 0x01, 0x0a, 0x0b, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x70,
	0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x70, 0x65, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x27, 0x0a, 0x0e, 0x73, 0x61, 0x6d, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x61, 0x6d,
	0x65, 0x6e, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x42, 0x19, 0x0a, 0x17, 0x70, 0x65,
	0x65, 0x72, 0x5f, 0x6f, 0x72, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6f, 0x72, 0x5f, 0x73, 0x67, 0x22, 0xa6, 0x01, 0x0a, 0x0c, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x52, 0x65, 0x66, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x70, 0x65, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x09, 0x70, 0x61,
	0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x09, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x27, 0x0a, 0x0e, 0x73, 0x61,
	0x6d, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x61, 0x6d, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x42, 0x19, 0x0a, 0x17, 0x70, 0x65, 0x65, 0x72, 0x5f, 0x6f, 0x72, 0x5f, 0x70,
	0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x72, 0x5f, 0x73, 0x67, 0x22, 0xae,
	0x02, 0x0a, 0x06, 0x4e, 0x6f, 0x74, 0x52, 0x65, 0x66, 0x12, 0x50, 0x0a, 0x0c, 0x69, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6c, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x66, 0x48, 0x00, 0x52, 0x0b,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x66, 0x12, 0x53, 0x0a, 0x0d, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66,
	0x48, 0x00, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x65, 0x66,
	0x12, 0x25, 0x0a, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65,
	0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x61, 0x72, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x1b, 0x0a, 0x08, 0x70, 0x65, 0x65, 0x72, 0x5f,
	0x72, 0x65, 0x66, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x70, 0x65, 0x65,
	0x72, 0x52, 0x65, 0x66, 0x12, 0x2e, 0x0a, 0x12, 0x73, 0x61, 0x6d, 0x65, 0x6e, 0x65, 0x73, 0x73,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x10, 0x73, 0x61, 0x6d, 0x65, 0x6e, 0x65, 0x73, 0x73, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x65, 0x66, 0x42, 0x09, 0x0a, 0x07, 0x6e, 0x6f, 0x74, 0x5f, 0x72, 0x65, 0x66, 0x22,
	0xa7, 0x01, 0x0a, 0x0a, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x44,
	0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x2e,
	0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x04,
	0x72, 0x75, 0x6c, 0x65, 0x12, 0x4b, 0x0a, 0x08, 0x6e, 0x6f, 0x74, 0x5f, 0x72, 0x75, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x6f, 0x74, 0x52, 0x75, 0x6c,
	0x65, 0x42, 0x06, 0x0a, 0x04, 0x70, 0x65, 0x72, 0x6d, 0x22, 0x86, 0x01, 0x0a, 0x0e, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x12, 0x47, 0x0a, 0x04,
	0x68, 0x74, 0x74, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x48, 0x54, 0x54, 0x50,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x52,
	0x04, 0x68, 0x74, 0x74, 0x70, 0x12, 0x2b, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x72,
	0x74, 0x73, 0x22, 0xd8, 0x01, 0x0a, 0x13, 0x48, 0x54, 0x54, 0x50, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x74, 0x68, 0x5f, 0x65, 0x78, 0x61, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x74, 0x68, 0x45, 0x78, 0x61, 0x63, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x74,
	0x68, 0x5f, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x61, 0x74, 0x68, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x61,
	0x74, 0x68, 0x5f, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x70, 0x61, 0x74, 0x68, 0x52, 0x65, 0x67, 0x65, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x73, 0x12, 0x48, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48,
	0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x6a, 0x0a,
	0x11, 0x4e, 0x6f, 0x74, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x75,
	0x6c, 0x65, 0x12, 0x55, 0x0a, 0x0e, 0x6e, 0x6f, 0x74, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x2e, 0x61, 0x75,
	0x74, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x52, 0x0d, 0x6e, 0x6f, 0x74, 0x50,
	0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xb4, 0x01, 0x0a, 0x10, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x07, 0x70, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x65, 0x78, 0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x65, 0x78, 0x61,
	0x63, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x66, 0x69, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x75,
	0x66, 0x66, 0x69, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x75, 0x66, 0x66,
	0x69, 0x78, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x72, 0x65, 0x67, 0x65, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x6e, 0x76, 0x65,
	0x72, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x6e, 0x76, 0x65, 0x72, 0x74,
	0x2a, 0x2b, 0x0a, 0x06, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x0c, 0x41, 0x43,
	0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x57, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x41, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x44, 0x45, 0x4e, 0x59, 0x10, 0x01, 0x42, 0x97, 0x02,
	0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e,
	0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x2e, 0x61, 0x75, 0x74, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c,
	0x70, 0x68, 0x61, 0x31, 0x42, 0x0f, 0x49, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2f, 0x63, 0x6f,
	0x6e, 0x73, 0x75, 0x6c, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x2f, 0x70, 0x62, 0x61, 0x75, 0x74, 0x68, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x3b, 0x61, 0x75, 0x74, 0x68, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02,
	0x03, 0x48, 0x43, 0x41, 0xaa, 0x02, 0x1e, 0x48, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x2e, 0x41, 0x75, 0x74, 0x68, 0x2e, 0x56, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x1e, 0x48, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72,
	0x70, 0x5c, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x5c, 0x41, 0x75, 0x74, 0x68, 0x5c, 0x56, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02, 0x2a, 0x48, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x5c, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x5c, 0x41, 0x75, 0x74, 0x68, 0x5c, 0x56,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x21, 0x48, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x3a,
	0x3a, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x3a, 0x3a, 0x41, 0x75, 0x74, 0x68, 0x3a, 0x3a, 0x56,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pbauth_v1alpha1_intentions_proto_rawDescOnce sync.Once
	file_pbauth_v1alpha1_intentions_proto_rawDescData = file_pbauth_v1alpha1_intentions_proto_rawDesc
)

func file_pbauth_v1alpha1_intentions_proto_rawDescGZIP() []byte {
	file_pbauth_v1alpha1_intentions_proto_rawDescOnce.Do(func() {
		file_pbauth_v1alpha1_intentions_proto_rawDescData = protoimpl.X.CompressGZIP(file_pbauth_v1alpha1_intentions_proto_rawDescData)
	})
	return file_pbauth_v1alpha1_intentions_proto_rawDescData
}

var file_pbauth_v1alpha1_intentions_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pbauth_v1alpha1_intentions_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_pbauth_v1alpha1_intentions_proto_goTypes = []interface{}{
	(Action)(0),                  // 0: hashicorp.consul.auth.v1alpha1.Action
	(*Intentions)(nil),           // 1: hashicorp.consul.auth.v1alpha1.Intentions
	(*Rule)(nil),                 // 2: hashicorp.consul.auth.v1alpha1.Rule
	(*Source)(nil),               // 3: hashicorp.consul.auth.v1alpha1.Source
	(*IdentityRef)(nil),          // 4: hashicorp.consul.auth.v1alpha1.IdentityRef
	(*NamespaceRef)(nil),         // 5: hashicorp.consul.auth.v1alpha1.NamespaceRef
	(*NotRef)(nil),               // 6: hashicorp.consul.auth.v1alpha1.NotRef
	(*Permission)(nil),           // 7: hashicorp.consul.auth.v1alpha1.Permission
	(*PermissionRule)(nil),       // 8: hashicorp.consul.auth.v1alpha1.PermissionRule
	(*HTTPPermissionRules)(nil),  // 9: hashicorp.consul.auth.v1alpha1.HTTPPermissionRules
	(*NotPermissionRule)(nil),    // 10: hashicorp.consul.auth.v1alpha1.NotPermissionRule
	(*PermissionHeader)(nil),     // 11: hashicorp.consul.auth.v1alpha1.PermissionHeader
	(*pbresource.Reference)(nil), // 12: hashicorp.consul.resource.Reference
}
var file_pbauth_v1alpha1_intentions_proto_depIdxs = []int32{
	12, // 0: hashicorp.consul.auth.v1alpha1.Intentions.destination:type_name -> hashicorp.consul.resource.Reference
	0,  // 1: hashicorp.consul.auth.v1alpha1.Intentions.action:type_name -> hashicorp.consul.auth.v1alpha1.Action
	2,  // 2: hashicorp.consul.auth.v1alpha1.Intentions.rules:type_name -> hashicorp.consul.auth.v1alpha1.Rule
	3,  // 3: hashicorp.consul.auth.v1alpha1.Rule.sources:type_name -> hashicorp.consul.auth.v1alpha1.Source
	7,  // 4: hashicorp.consul.auth.v1alpha1.Rule.permissions:type_name -> hashicorp.consul.auth.v1alpha1.Permission
	4,  // 5: hashicorp.consul.auth.v1alpha1.Source.identity_ref:type_name -> hashicorp.consul.auth.v1alpha1.IdentityRef
	5,  // 6: hashicorp.consul.auth.v1alpha1.Source.namespace_ref:type_name -> hashicorp.consul.auth.v1alpha1.NamespaceRef
	3,  // 7: hashicorp.consul.auth.v1alpha1.Source.not:type_name -> hashicorp.consul.auth.v1alpha1.Source
	4,  // 8: hashicorp.consul.auth.v1alpha1.NotRef.identity_ref:type_name -> hashicorp.consul.auth.v1alpha1.IdentityRef
	5,  // 9: hashicorp.consul.auth.v1alpha1.NotRef.namespace_ref:type_name -> hashicorp.consul.auth.v1alpha1.NamespaceRef
	8,  // 10: hashicorp.consul.auth.v1alpha1.Permission.rule:type_name -> hashicorp.consul.auth.v1alpha1.PermissionRule
	8,  // 11: hashicorp.consul.auth.v1alpha1.Permission.not_rule:type_name -> hashicorp.consul.auth.v1alpha1.PermissionRule
	9,  // 12: hashicorp.consul.auth.v1alpha1.PermissionRule.http:type_name -> hashicorp.consul.auth.v1alpha1.HTTPPermissionRules
	11, // 13: hashicorp.consul.auth.v1alpha1.HTTPPermissionRules.header:type_name -> hashicorp.consul.auth.v1alpha1.PermissionHeader
	8,  // 14: hashicorp.consul.auth.v1alpha1.NotPermissionRule.not_permission:type_name -> hashicorp.consul.auth.v1alpha1.PermissionRule
	15, // [15:15] is the sub-list for method output_type
	15, // [15:15] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_pbauth_v1alpha1_intentions_proto_init() }
func file_pbauth_v1alpha1_intentions_proto_init() {
	if File_pbauth_v1alpha1_intentions_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pbauth_v1alpha1_intentions_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Intentions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbauth_v1alpha1_intentions_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbauth_v1alpha1_intentions_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Source); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbauth_v1alpha1_intentions_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbauth_v1alpha1_intentions_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbauth_v1alpha1_intentions_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbauth_v1alpha1_intentions_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Permission); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbauth_v1alpha1_intentions_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbauth_v1alpha1_intentions_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HTTPPermissionRules); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbauth_v1alpha1_intentions_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NotPermissionRule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbauth_v1alpha1_intentions_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PermissionHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pbauth_v1alpha1_intentions_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Source_IdentityRef)(nil),
		(*Source_NamespaceRef)(nil),
		(*Source_PartitionRef)(nil),
		(*Source_PeerRef)(nil),
		(*Source_SamenessGroupRef)(nil),
		(*Source_Not)(nil),
	}
	file_pbauth_v1alpha1_intentions_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*IdentityRef_Peer)(nil),
		(*IdentityRef_Partition)(nil),
		(*IdentityRef_SamenessGroup)(nil),
	}
	file_pbauth_v1alpha1_intentions_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*NamespaceRef_Peer)(nil),
		(*NamespaceRef_Partition)(nil),
		(*NamespaceRef_SamenessGroup)(nil),
	}
	file_pbauth_v1alpha1_intentions_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*NotRef_IdentityRef)(nil),
		(*NotRef_NamespaceRef)(nil),
		(*NotRef_PartitionRef)(nil),
		(*NotRef_PeerRef)(nil),
		(*NotRef_SamenessGroupRef)(nil),
	}
	file_pbauth_v1alpha1_intentions_proto_msgTypes[6].OneofWrappers = []interface{}{
		(*Permission_Rule)(nil),
		(*Permission_NotRule)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pbauth_v1alpha1_intentions_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pbauth_v1alpha1_intentions_proto_goTypes,
		DependencyIndexes: file_pbauth_v1alpha1_intentions_proto_depIdxs,
		EnumInfos:         file_pbauth_v1alpha1_intentions_proto_enumTypes,
		MessageInfos:      file_pbauth_v1alpha1_intentions_proto_msgTypes,
	}.Build()
	File_pbauth_v1alpha1_intentions_proto = out.File
	file_pbauth_v1alpha1_intentions_proto_rawDesc = nil
	file_pbauth_v1alpha1_intentions_proto_goTypes = nil
	file_pbauth_v1alpha1_intentions_proto_depIdxs = nil
}
