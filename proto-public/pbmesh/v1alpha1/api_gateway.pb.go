// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: BUSL-1.1

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        (unknown)
// source: pbmesh/v1alpha1/api_gateway.proto

package meshv1alpha1

import (
	pbresource "github.com/hashicorp/consul/proto-public/pbresource"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ListenerProtocol int32

const (
	ListenerProtocol_LISTENER_PROTOCOL_UNSPECIFIED ListenerProtocol = 0
	ListenerProtocol_LISTENER_PROTOCOL_HTTP        ListenerProtocol = 1
	ListenerProtocol_LISTENER_PROTOCOL_TCP         ListenerProtocol = 2
)

// Enum value maps for ListenerProtocol.
var (
	ListenerProtocol_name = map[int32]string{
		0: "LISTENER_PROTOCOL_UNSPECIFIED",
		1: "LISTENER_PROTOCOL_HTTP",
		2: "LISTENER_PROTOCOL_TCP",
	}
	ListenerProtocol_value = map[string]int32{
		"LISTENER_PROTOCOL_UNSPECIFIED": 0,
		"LISTENER_PROTOCOL_HTTP":        1,
		"LISTENER_PROTOCOL_TCP":         2,
	}
)

func (x ListenerProtocol) Enum() *ListenerProtocol {
	p := new(ListenerProtocol)
	*p = x
	return p
}

func (x ListenerProtocol) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ListenerProtocol) Descriptor() protoreflect.EnumDescriptor {
	return file_pbmesh_v1alpha1_api_gateway_proto_enumTypes[0].Descriptor()
}

func (ListenerProtocol) Type() protoreflect.EnumType {
	return &file_pbmesh_v1alpha1_api_gateway_proto_enumTypes[0]
}

func (x ListenerProtocol) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ListenerProtocol.Descriptor instead.
func (ListenerProtocol) EnumDescriptor() ([]byte, []int) {
	return file_pbmesh_v1alpha1_api_gateway_proto_rawDescGZIP(), []int{0}
}

type TLSVersion int32

const (
	TLSVersion_TLS_VERSION_UNSPECIFIED TLSVersion = 0
	TLSVersion_TLS_VERSION_AUTO        TLSVersion = 1
	TLSVersion_TLS_VERSION_1_0         TLSVersion = 2
	TLSVersion_TLS_VERSION_1_1         TLSVersion = 3
	TLSVersion_TLS_VERSION_1_2         TLSVersion = 4
	TLSVersion_TLS_VERSION_1_3         TLSVersion = 5
)

// Enum value maps for TLSVersion.
var (
	TLSVersion_name = map[int32]string{
		0: "TLS_VERSION_UNSPECIFIED",
		1: "TLS_VERSION_AUTO",
		2: "TLS_VERSION_1_0",
		3: "TLS_VERSION_1_1",
		4: "TLS_VERSION_1_2",
		5: "TLS_VERSION_1_3",
	}
	TLSVersion_value = map[string]int32{
		"TLS_VERSION_UNSPECIFIED": 0,
		"TLS_VERSION_AUTO":        1,
		"TLS_VERSION_1_0":         2,
		"TLS_VERSION_1_1":         3,
		"TLS_VERSION_1_2":         4,
		"TLS_VERSION_1_3":         5,
	}
)

func (x TLSVersion) Enum() *TLSVersion {
	p := new(TLSVersion)
	*p = x
	return p
}

func (x TLSVersion) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TLSVersion) Descriptor() protoreflect.EnumDescriptor {
	return file_pbmesh_v1alpha1_api_gateway_proto_enumTypes[1].Descriptor()
}

func (TLSVersion) Type() protoreflect.EnumType {
	return &file_pbmesh_v1alpha1_api_gateway_proto_enumTypes[1]
}

func (x TLSVersion) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TLSVersion.Descriptor instead.
func (TLSVersion) EnumDescriptor() ([]byte, []int) {
	return file_pbmesh_v1alpha1_api_gateway_proto_rawDescGZIP(), []int{1}
}

type TLSCipherSuite int32

const (
	TLSCipherSuite_TLS_CIPHER_SUITE_UNSPECIFIED                               TLSCipherSuite = 0
	TLSCipherSuite_TLS_CIPHER_SUITE_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256 TLSCipherSuite = 1
	TLSCipherSuite_TLS_CIPHER_SUITE_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256   TLSCipherSuite = 2
	TLSCipherSuite_TLS_CIPHER_SUITE_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256       TLSCipherSuite = 3
	TLSCipherSuite_TLS_CIPHER_SUITE_ECDHE_RSA_WITH_AES_128_GCM_SHA256         TLSCipherSuite = 4
	TLSCipherSuite_TLS_CIPHER_SUITE_ECDHE_ECDSA_WITH_AES_128_CBC_SHA          TLSCipherSuite = 5
	TLSCipherSuite_TLS_CIPHER_SUITE_ECDHE_RSA_WITH_AES_128_CBC_SHA            TLSCipherSuite = 6
	TLSCipherSuite_TLS_CIPHER_SUITE_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384       TLSCipherSuite = 7
	TLSCipherSuite_TLS_CIPHER_SUITE_ECDHE_RSA_WITH_AES_256_GCM_SHA384         TLSCipherSuite = 8
	TLSCipherSuite_TLS_CIPHER_SUITE_ECDHE_ECDSA_WITH_AES_256_CBC_SHA          TLSCipherSuite = 9
	TLSCipherSuite_TLS_CIPHER_SUITE_ECDHE_RSA_WITH_AES_256_CBC_SHA            TLSCipherSuite = 10
)

// Enum value maps for TLSCipherSuite.
var (
	TLSCipherSuite_name = map[int32]string{
		0:  "TLS_CIPHER_SUITE_UNSPECIFIED",
		1:  "TLS_CIPHER_SUITE_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256",
		2:  "TLS_CIPHER_SUITE_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256",
		3:  "TLS_CIPHER_SUITE_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
		4:  "TLS_CIPHER_SUITE_ECDHE_RSA_WITH_AES_128_GCM_SHA256",
		5:  "TLS_CIPHER_SUITE_ECDHE_ECDSA_WITH_AES_128_CBC_SHA",
		6:  "TLS_CIPHER_SUITE_ECDHE_RSA_WITH_AES_128_CBC_SHA",
		7:  "TLS_CIPHER_SUITE_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
		8:  "TLS_CIPHER_SUITE_ECDHE_RSA_WITH_AES_256_GCM_SHA384",
		9:  "TLS_CIPHER_SUITE_ECDHE_ECDSA_WITH_AES_256_CBC_SHA",
		10: "TLS_CIPHER_SUITE_ECDHE_RSA_WITH_AES_256_CBC_SHA",
	}
	TLSCipherSuite_value = map[string]int32{
		"TLS_CIPHER_SUITE_UNSPECIFIED":                               0,
		"TLS_CIPHER_SUITE_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256": 1,
		"TLS_CIPHER_SUITE_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256":   2,
		"TLS_CIPHER_SUITE_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256":       3,
		"TLS_CIPHER_SUITE_ECDHE_RSA_WITH_AES_128_GCM_SHA256":         4,
		"TLS_CIPHER_SUITE_ECDHE_ECDSA_WITH_AES_128_CBC_SHA":          5,
		"TLS_CIPHER_SUITE_ECDHE_RSA_WITH_AES_128_CBC_SHA":            6,
		"TLS_CIPHER_SUITE_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384":       7,
		"TLS_CIPHER_SUITE_ECDHE_RSA_WITH_AES_256_GCM_SHA384":         8,
		"TLS_CIPHER_SUITE_ECDHE_ECDSA_WITH_AES_256_CBC_SHA":          9,
		"TLS_CIPHER_SUITE_ECDHE_RSA_WITH_AES_256_CBC_SHA":            10,
	}
)

func (x TLSCipherSuite) Enum() *TLSCipherSuite {
	p := new(TLSCipherSuite)
	*p = x
	return p
}

func (x TLSCipherSuite) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TLSCipherSuite) Descriptor() protoreflect.EnumDescriptor {
	return file_pbmesh_v1alpha1_api_gateway_proto_enumTypes[2].Descriptor()
}

func (TLSCipherSuite) Type() protoreflect.EnumType {
	return &file_pbmesh_v1alpha1_api_gateway_proto_enumTypes[2]
}

func (x TLSCipherSuite) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TLSCipherSuite.Descriptor instead.
func (TLSCipherSuite) EnumDescriptor() ([]byte, []int) {
	return file_pbmesh_v1alpha1_api_gateway_proto_rawDescGZIP(), []int{2}
}

// NOTE: this should align to the GAMMA/gateway-api version, or at least be
// easily translatable.
//
// https://gateway-api.sigs.k8s.io/references/spec/#gateway.networking.k8s.io/v1beta1.Gateway
//
// This is a Resource type.
type APIGateway struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Listeners []*Listener `protobuf:"bytes,1,rep,name=listeners,proto3" json:"listeners,omitempty"`
}

func (x *APIGateway) Reset() {
	*x = APIGateway{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmesh_v1alpha1_api_gateway_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *APIGateway) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*APIGateway) ProtoMessage() {}

func (x *APIGateway) ProtoReflect() protoreflect.Message {
	mi := &file_pbmesh_v1alpha1_api_gateway_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use APIGateway.ProtoReflect.Descriptor instead.
func (*APIGateway) Descriptor() ([]byte, []int) {
	return file_pbmesh_v1alpha1_api_gateway_proto_rawDescGZIP(), []int{0}
}

func (x *APIGateway) GetListeners() []*Listener {
	if x != nil {
		return x.Listeners
	}
	return nil
}

type Listener struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Hostname string `protobuf:"bytes,2,opt,name=hostname,proto3" json:"hostname,omitempty"`
	// TODO Consider using string if we ever need to reference something other than ServicePort.virtual_port
	Port     int32                     `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Protocol ListenerProtocol          `protobuf:"varint,4,opt,name=protocol,proto3,enum=hashicorp.consul.mesh.v1alpha1.ListenerProtocol" json:"protocol,omitempty"`
	Tls      *ListenerTLSConfiguration `protobuf:"bytes,5,opt,name=tls,proto3" json:"tls,omitempty"`
}

func (x *Listener) Reset() {
	*x = Listener{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmesh_v1alpha1_api_gateway_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Listener) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Listener) ProtoMessage() {}

func (x *Listener) ProtoReflect() protoreflect.Message {
	mi := &file_pbmesh_v1alpha1_api_gateway_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Listener.ProtoReflect.Descriptor instead.
func (*Listener) Descriptor() ([]byte, []int) {
	return file_pbmesh_v1alpha1_api_gateway_proto_rawDescGZIP(), []int{1}
}

func (x *Listener) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Listener) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Listener) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Listener) GetProtocol() ListenerProtocol {
	if x != nil {
		return x.Protocol
	}
	return ListenerProtocol_LISTENER_PROTOCOL_UNSPECIFIED
}

func (x *Listener) GetTls() *ListenerTLSConfiguration {
	if x != nil {
		return x.Tls
	}
	return nil
}

type ListenerTLSConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Certificates []*pbresource.Reference `protobuf:"bytes,1,rep,name=certificates,proto3" json:"certificates,omitempty"`
	MaxVersion   TLSVersion              `protobuf:"varint,2,opt,name=maxVersion,proto3,enum=hashicorp.consul.mesh.v1alpha1.TLSVersion" json:"maxVersion,omitempty"`
	MinVersion   TLSVersion              `protobuf:"varint,3,opt,name=minVersion,proto3,enum=hashicorp.consul.mesh.v1alpha1.TLSVersion" json:"minVersion,omitempty"`
	CipherSuites []TLSCipherSuite        `protobuf:"varint,4,rep,packed,name=cipherSuites,proto3,enum=hashicorp.consul.mesh.v1alpha1.TLSCipherSuite" json:"cipherSuites,omitempty"`
}

func (x *ListenerTLSConfiguration) Reset() {
	*x = ListenerTLSConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pbmesh_v1alpha1_api_gateway_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListenerTLSConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListenerTLSConfiguration) ProtoMessage() {}

func (x *ListenerTLSConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_pbmesh_v1alpha1_api_gateway_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListenerTLSConfiguration.ProtoReflect.Descriptor instead.
func (*ListenerTLSConfiguration) Descriptor() ([]byte, []int) {
	return file_pbmesh_v1alpha1_api_gateway_proto_rawDescGZIP(), []int{2}
}

func (x *ListenerTLSConfiguration) GetCertificates() []*pbresource.Reference {
	if x != nil {
		return x.Certificates
	}
	return nil
}

func (x *ListenerTLSConfiguration) GetMaxVersion() TLSVersion {
	if x != nil {
		return x.MaxVersion
	}
	return TLSVersion_TLS_VERSION_UNSPECIFIED
}

func (x *ListenerTLSConfiguration) GetMinVersion() TLSVersion {
	if x != nil {
		return x.MinVersion
	}
	return TLSVersion_TLS_VERSION_UNSPECIFIED
}

func (x *ListenerTLSConfiguration) GetCipherSuites() []TLSCipherSuite {
	if x != nil {
		return x.CipherSuites
	}
	return nil
}

var File_pbmesh_v1alpha1_api_gateway_proto protoreflect.FileDescriptor

var file_pbmesh_v1alpha1_api_gateway_proto_rawDesc = []byte{
	0x0a, 0x21, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2f, 0x61, 0x70, 0x69, 0x5f, 0x67, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x1e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x31, 0x1a, 0x19, 0x70, 0x62, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x54,
	0x0a, 0x0a, 0x41, 0x50, 0x49, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x12, 0x46, 0x0a, 0x09,
	0x6c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x75, 0x6c, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x52, 0x09, 0x6c, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x65, 0x72, 0x73, 0x22, 0xe8, 0x01, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x4c, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63,
	0x6f, 0x72, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x12, 0x4a, 0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x38, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x63, 0x6f, 0x6e,
	0x73, 0x75, 0x6c, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x54, 0x4c, 0x53, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x22,
	0xd0, 0x02, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x54, 0x4c, 0x53, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0c,
	0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x2e, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52,
	0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x12, 0x4a, 0x0a, 0x0a, 0x6d, 0x61, 0x78, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x68, 0x61, 0x73,
	0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x2e, 0x6d, 0x65,
	0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x4c, 0x53, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x6d, 0x61, 0x78, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x4a, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f,
	0x72, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x4c, 0x53, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x52,
	0x0a, 0x0c, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x53, 0x75, 0x69, 0x74, 0x65, 0x73, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x68, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70,
	0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x2e, 0x6d, 0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x31, 0x2e, 0x54, 0x4c, 0x53, 0x43, 0x69, 0x70, 0x68, 0x65, 0x72, 0x53,
	0x75, 0x69, 0x74, 0x65, 0x52, 0x0c, 0x63, 0x69, 0x70, 0x68, 0x65, 0x72, 0x53, 0x75, 0x69, 0x74,
	0x65, 0x73, 0x2a, 0x6c, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x21, 0x0a, 0x1d, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x4e,
	0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x55, 0x4e, 0x53, 0x50,
	0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a, 0x16, 0x4c, 0x49, 0x53,
	0x54, 0x45, 0x4e, 0x45, 0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x48,
	0x54, 0x54, 0x50, 0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x4c, 0x49, 0x53, 0x54, 0x45, 0x4e, 0x45,
	0x52, 0x5f, 0x50, 0x52, 0x4f, 0x54, 0x4f, 0x43, 0x4f, 0x4c, 0x5f, 0x54, 0x43, 0x50, 0x10, 0x02,
	0x2a, 0x93, 0x01, 0x0a, 0x0a, 0x54, 0x4c, 0x53, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x1b, 0x0a, 0x17, 0x54, 0x4c, 0x53, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10,
	0x54, 0x4c, 0x53, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x41, 0x55, 0x54, 0x4f,
	0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x4c, 0x53, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x31, 0x5f, 0x30, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x4c, 0x53, 0x5f, 0x56,
	0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x31, 0x5f, 0x31, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f,
	0x54, 0x4c, 0x53, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x31, 0x5f, 0x32, 0x10,
	0x04, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x4c, 0x53, 0x5f, 0x56, 0x45, 0x52, 0x53, 0x49, 0x4f, 0x4e,
	0x5f, 0x31, 0x5f, 0x33, 0x10, 0x05, 0x2a, 0xec, 0x04, 0x0a, 0x0e, 0x54, 0x4c, 0x53, 0x43, 0x69,
	0x70, 0x68, 0x65, 0x72, 0x53, 0x75, 0x69, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x1c, 0x54, 0x4c, 0x53,
	0x5f, 0x43, 0x49, 0x50, 0x48, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x49, 0x54, 0x45, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x3e, 0x0a, 0x3a, 0x54,
	0x4c, 0x53, 0x5f, 0x43, 0x49, 0x50, 0x48, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x49, 0x54, 0x45, 0x5f,
	0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x43, 0x48, 0x41, 0x43, 0x48, 0x41, 0x32, 0x30, 0x5f, 0x50, 0x4f, 0x4c, 0x59, 0x31, 0x33,
	0x30, 0x35, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x01, 0x12, 0x3c, 0x0a, 0x38, 0x54,
	0x4c, 0x53, 0x5f, 0x43, 0x49, 0x50, 0x48, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x49, 0x54, 0x45, 0x5f,
	0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x43,
	0x48, 0x41, 0x43, 0x48, 0x41, 0x32, 0x30, 0x5f, 0x50, 0x4f, 0x4c, 0x59, 0x31, 0x33, 0x30, 0x35,
	0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x02, 0x12, 0x38, 0x0a, 0x34, 0x54, 0x4c, 0x53,
	0x5f, 0x43, 0x49, 0x50, 0x48, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x49, 0x54, 0x45, 0x5f, 0x45, 0x43,
	0x44, 0x48, 0x45, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41,
	0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35,
	0x36, 0x10, 0x03, 0x12, 0x36, 0x0a, 0x32, 0x54, 0x4c, 0x53, 0x5f, 0x43, 0x49, 0x50, 0x48, 0x45,
	0x52, 0x5f, 0x53, 0x55, 0x49, 0x54, 0x45, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x52, 0x53,
	0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x47,
	0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x10, 0x04, 0x12, 0x35, 0x0a, 0x31, 0x54,
	0x4c, 0x53, 0x5f, 0x43, 0x49, 0x50, 0x48, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x49, 0x54, 0x45, 0x5f,
	0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41,
	0x10, 0x05, 0x12, 0x33, 0x0a, 0x2f, 0x54, 0x4c, 0x53, 0x5f, 0x43, 0x49, 0x50, 0x48, 0x45, 0x52,
	0x5f, 0x53, 0x55, 0x49, 0x54, 0x45, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x52, 0x53, 0x41,
	0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x31, 0x32, 0x38, 0x5f, 0x43, 0x42,
	0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x06, 0x12, 0x38, 0x0a, 0x34, 0x54, 0x4c, 0x53, 0x5f, 0x43,
	0x49, 0x50, 0x48, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x49, 0x54, 0x45, 0x5f, 0x45, 0x43, 0x44, 0x48,
	0x45, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53,
	0x5f, 0x32, 0x35, 0x36, 0x5f, 0x47, 0x43, 0x4d, 0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10,
	0x07, 0x12, 0x36, 0x0a, 0x32, 0x54, 0x4c, 0x53, 0x5f, 0x43, 0x49, 0x50, 0x48, 0x45, 0x52, 0x5f,
	0x53, 0x55, 0x49, 0x54, 0x45, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x52, 0x53, 0x41, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x47, 0x43, 0x4d,
	0x5f, 0x53, 0x48, 0x41, 0x33, 0x38, 0x34, 0x10, 0x08, 0x12, 0x35, 0x0a, 0x31, 0x54, 0x4c, 0x53,
	0x5f, 0x43, 0x49, 0x50, 0x48, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x49, 0x54, 0x45, 0x5f, 0x45, 0x43,
	0x44, 0x48, 0x45, 0x5f, 0x45, 0x43, 0x44, 0x53, 0x41, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x41,
	0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x42, 0x43, 0x5f, 0x53, 0x48, 0x41, 0x10, 0x09,
	0x12, 0x33, 0x0a, 0x2f, 0x54, 0x4c, 0x53, 0x5f, 0x43, 0x49, 0x50, 0x48, 0x45, 0x52, 0x5f, 0x53,
	0x55, 0x49, 0x54, 0x45, 0x5f, 0x45, 0x43, 0x44, 0x48, 0x45, 0x5f, 0x52, 0x53, 0x41, 0x5f, 0x57,
	0x49, 0x54, 0x48, 0x5f, 0x41, 0x45, 0x53, 0x5f, 0x32, 0x35, 0x36, 0x5f, 0x43, 0x42, 0x43, 0x5f,
	0x53, 0x48, 0x41, 0x10, 0x0a, 0x42, 0x97, 0x02, 0x0a, 0x22, 0x63, 0x6f, 0x6d, 0x2e, 0x68, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x2e, 0x6d,
	0x65, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x42, 0x0f, 0x41, 0x70,
	0x69, 0x47, 0x61, 0x74, 0x65, 0x77, 0x61, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a,
	0x45, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x61, 0x73, 0x68,
	0x69, 0x63, 0x6f, 0x72, 0x70, 0x2f, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2d, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x2f, 0x70, 0x62, 0x6d, 0x65, 0x73, 0x68,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x3b, 0x6d, 0x65, 0x73, 0x68, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xa2, 0x02, 0x03, 0x48, 0x43, 0x4d, 0xaa, 0x02, 0x1e, 0x48,
	0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x2e,
	0x4d, 0x65, 0x73, 0x68, 0x2e, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xca, 0x02, 0x1e,
	0x48, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x5c, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c,
	0x5c, 0x4d, 0x65, 0x73, 0x68, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0xe2, 0x02,
	0x2a, 0x48, 0x61, 0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x5c, 0x43, 0x6f, 0x6e, 0x73, 0x75,
	0x6c, 0x5c, 0x4d, 0x65, 0x73, 0x68, 0x5c, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x21, 0x48, 0x61,
	0x73, 0x68, 0x69, 0x63, 0x6f, 0x72, 0x70, 0x3a, 0x3a, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6c, 0x3a,
	0x3a, 0x4d, 0x65, 0x73, 0x68, 0x3a, 0x3a, 0x56, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pbmesh_v1alpha1_api_gateway_proto_rawDescOnce sync.Once
	file_pbmesh_v1alpha1_api_gateway_proto_rawDescData = file_pbmesh_v1alpha1_api_gateway_proto_rawDesc
)

func file_pbmesh_v1alpha1_api_gateway_proto_rawDescGZIP() []byte {
	file_pbmesh_v1alpha1_api_gateway_proto_rawDescOnce.Do(func() {
		file_pbmesh_v1alpha1_api_gateway_proto_rawDescData = protoimpl.X.CompressGZIP(file_pbmesh_v1alpha1_api_gateway_proto_rawDescData)
	})
	return file_pbmesh_v1alpha1_api_gateway_proto_rawDescData
}

var file_pbmesh_v1alpha1_api_gateway_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_pbmesh_v1alpha1_api_gateway_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_pbmesh_v1alpha1_api_gateway_proto_goTypes = []interface{}{
	(ListenerProtocol)(0),            // 0: hashicorp.consul.mesh.v1alpha1.ListenerProtocol
	(TLSVersion)(0),                  // 1: hashicorp.consul.mesh.v1alpha1.TLSVersion
	(TLSCipherSuite)(0),              // 2: hashicorp.consul.mesh.v1alpha1.TLSCipherSuite
	(*APIGateway)(nil),               // 3: hashicorp.consul.mesh.v1alpha1.APIGateway
	(*Listener)(nil),                 // 4: hashicorp.consul.mesh.v1alpha1.Listener
	(*ListenerTLSConfiguration)(nil), // 5: hashicorp.consul.mesh.v1alpha1.ListenerTLSConfiguration
	(*pbresource.Reference)(nil),     // 6: hashicorp.consul.resource.Reference
}
var file_pbmesh_v1alpha1_api_gateway_proto_depIdxs = []int32{
	4, // 0: hashicorp.consul.mesh.v1alpha1.APIGateway.listeners:type_name -> hashicorp.consul.mesh.v1alpha1.Listener
	0, // 1: hashicorp.consul.mesh.v1alpha1.Listener.protocol:type_name -> hashicorp.consul.mesh.v1alpha1.ListenerProtocol
	5, // 2: hashicorp.consul.mesh.v1alpha1.Listener.tls:type_name -> hashicorp.consul.mesh.v1alpha1.ListenerTLSConfiguration
	6, // 3: hashicorp.consul.mesh.v1alpha1.ListenerTLSConfiguration.certificates:type_name -> hashicorp.consul.resource.Reference
	1, // 4: hashicorp.consul.mesh.v1alpha1.ListenerTLSConfiguration.maxVersion:type_name -> hashicorp.consul.mesh.v1alpha1.TLSVersion
	1, // 5: hashicorp.consul.mesh.v1alpha1.ListenerTLSConfiguration.minVersion:type_name -> hashicorp.consul.mesh.v1alpha1.TLSVersion
	2, // 6: hashicorp.consul.mesh.v1alpha1.ListenerTLSConfiguration.cipherSuites:type_name -> hashicorp.consul.mesh.v1alpha1.TLSCipherSuite
	7, // [7:7] is the sub-list for method output_type
	7, // [7:7] is the sub-list for method input_type
	7, // [7:7] is the sub-list for extension type_name
	7, // [7:7] is the sub-list for extension extendee
	0, // [0:7] is the sub-list for field type_name
}

func init() { file_pbmesh_v1alpha1_api_gateway_proto_init() }
func file_pbmesh_v1alpha1_api_gateway_proto_init() {
	if File_pbmesh_v1alpha1_api_gateway_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pbmesh_v1alpha1_api_gateway_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*APIGateway); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmesh_v1alpha1_api_gateway_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Listener); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pbmesh_v1alpha1_api_gateway_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListenerTLSConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pbmesh_v1alpha1_api_gateway_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pbmesh_v1alpha1_api_gateway_proto_goTypes,
		DependencyIndexes: file_pbmesh_v1alpha1_api_gateway_proto_depIdxs,
		EnumInfos:         file_pbmesh_v1alpha1_api_gateway_proto_enumTypes,
		MessageInfos:      file_pbmesh_v1alpha1_api_gateway_proto_msgTypes,
	}.Build()
	File_pbmesh_v1alpha1_api_gateway_proto = out.File
	file_pbmesh_v1alpha1_api_gateway_proto_rawDesc = nil
	file_pbmesh_v1alpha1_api_gateway_proto_goTypes = nil
	file_pbmesh_v1alpha1_api_gateway_proto_depIdxs = nil
}
