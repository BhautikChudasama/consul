name: reusable-dev-build

on:
  workflow_call:
    inputs:
      uploaded-binary-name:
        required: false
        type: string
        default: "consul-bin"
      runs-on:
        description: An expression indicating which kind of runners to use.
        required: true
        type: string
      repository-name:
        required: true
        type: string
      go-arch:
        required: false
        type: string
        default: "amd64"
      go-version:
        required: false
        type: string
        default: "1.20.6"
      cachekey_GOMODCACHE:
        required: false
        type: string
        default: ""
    outputs:
      cachekey_GOCACHE:
        value: "${{ jobs.build.outputs.cachekey_GOCACHE }}"
    secrets:
      elevated-github-token:
        required: true
env:
  GOARCH: "${{ inputs.go-arch }}"
jobs:
  build:
    runs-on: ${{ fromJSON(inputs.runs-on) }}
    outputs:
      cachekey_GOCACHE: "${{ steps.cachekey_GOCACHE.outputs.cachekey_GOCACHE }}"
    steps:
      - uses: actions/checkout@c85c95e3d7251135ab7dc9ce3241c5835cc595a9 # v3.5.3
      # NOTE: This step is specifically needed for ENT. It allows us to access the required private HashiCorp repos.
      - name: Setup Git
        if: ${{ endsWith(inputs.repository-name, '-enterprise') }}
        run: git config --global url."https://${{ secrets.elevated-github-token }}:@github.com".insteadOf "https://github.com"
      - id: setup_go 
        uses: actions/setup-go@fac708d6674e30b6ba41289acaab6d4b75aa0753 # v4.0.1
        with:
          go-version: "${{ inputs.go-version }}"
          cache: false
      - id: cachekey_GOCACHE
        run: |
          GOVERSION="${{ steps.setup_go.outputs.go-version }}" \
          GOPACKAGENAME="$( go -list -m )" \
          .github/scripts/cachekey_GOCACHE.sh
      - name: restore GOMODCACHE
        uses: actions/cache/restore@v3
        if: "${{ inputs.cachekey_GOMODCACHE != '' }}"
        with:
          key: "${{inputs.cachekey_GOMODCACHE}}"
          path: ~/go/pkg/mod 
      # this should take no time at all, since we should hit GOMODCACHE
      - run: go mod download
      - name: restore GOCACHE
        uses: actions/cache/restore@v3
        with:
          key: "${{ steps.cachekey_GOCACHE.outputs.cachekey_GOCACHE }}"
          path: ~/.cache/go-build
      - name: Build
        env:
          GOARCH: ${{ inputs.go-arch }}
        run: make dev
      # github doesn't let you overwrite a cache, so we just delete it first
      # - name: delete old GOCACHE
      #   run: |
      #     gh extension install actions/gh-actions-cache
      #     gh actions-cache delete --confirm -B "$GITHUB_REF" "${{steps.cachekey_GOCACHE.outputs.cachekey_GOCACHE}}" || true
      #   env:
      #     GITHUB_TOKEN: "${{ secrets.elevated-github-token}}"
      # - name: save GOCACHE
      #   uses: actions/cache/save@v3
      #   with:
      #     key: "${{ steps.cachekey_GOCACHE.outputs.cachekey_GOCACHE }}"
      #     path: ~/.cache/go-build
      # save dev build to pass to downstream jobs
      - uses: actions/upload-artifact@0b7f8abb1508181956e8e162db84b466c27e18ce # v3.1.2
        with:
          name: ${{inputs.uploaded-binary-name}}
          path: ./bin/consul
      - name: Notify Slack
        if: ${{ failure() }}
        run: .github/scripts/notify_slack.sh
