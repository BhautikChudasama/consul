# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: MPL-2.0

name: test-integrations-windows

on:
  pull_request:
    branches-ignore:
      - stable-website
      - 'docs/**'
      - 'ui/**'
      - 'mktg-**' # Digital Team Terraform-generated branch prefix
      - 'backport/docs/**'
      - 'backport/ui/**'
      - 'backport/mktg-**'

env:
  TEST_RESULTS_DIR: /tmp/test-results
  TEST_RESULTS_ARTIFACT_NAME: test-results
  CONSUL_LICENSE: ${{ secrets.CONSUL_LICENSE }}
  GOTAGS: ${{ endsWith(github.repository, '-enterprise') && 'consulent' || '' }}
  GOTESTSUM_VERSION: "1.9.0"
  CONSUL_BINARY_UPLOAD_NAME: consul.exe
  # strip the hashicorp/ off the front of github.repository for consul
  CONSUL_LATEST_IMAGE_NAME: ${{ endsWith(github.repository, '-enterprise') && github.repository || 'consul' }}
  GOPRIVATE: github.com/hashicorp # Required for enterprise deps

jobs:
  setup:
    runs-on: ubuntu-latest
    name: Setup
    outputs:
      compute-small: ${{ steps.runners.outputs.compute-small }}
      compute-medium: ${{ steps.runners.outputs.compute-medium }}
      compute-large: ${{ steps.runners.outputs.compute-large }}
      compute-xl: ${{ steps.runners.outputs.compute-xl }}
      enterprise: ${{ steps.runners.outputs.enterprise }}
    steps:
      - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
      - id: runners
        run: .github/scripts/get_runner_classes_windows.sh

  dev-build:
    uses: ./.github/workflows/reusable-dev-build-windows.yml
    with:
      runs-on: ${{ needs.setup.outputs.compute-xl }}
      repository-name: ${{ github.repository }}
      uploaded-binary-name: 'consul.exe'
    secrets:
      elevated-github-token: ${{ secrets.ELEVATED_GITHUB_TOKEN }}

# Skipping this because - https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/wasm_filter
# case-wasm,
# Skipping because of - cacert is not available in curl windows
# https://www.phillipsj.net/posts/windows-curl-and-self-signed-certs/
# case-ingress-gateway-tls,

  envoy-integration-test:
    needs:
      - setup
      - dev-build
    runs-on: ${{ fromJSON(needs.setup.outputs.compute-large) }}
    permissions:
      id-token: write # NOTE: this permission is explicitly required for Vault auth.
      contents: read
    strategy:
      fail-fast: false
      matrix:
        envoy-version: [ "1.23.10", "1.24.8", "1.25.7", "1.26.2" ]
        xds-target: [ "server", "client" ]
        test-cases: ["case-api-gateway-http-hostnames",
            "case-api-gateway-http-simple",
            "case-api-gateway-http-splitter-targets",
            "case-api-gateway-http-tls-overlapping-hosts",
            "case-api-gateway-tcp-conflicted",
            "case-api-gateway-tcp-simple",
            "case-api-gateway-tcp-tls-overlapping-hosts",
            "case-badauthz",
            "case-basic",
            "case-centralconf",
            "case-cfg-resolver-cluster-peering-failover",
            "case-cfg-resolver-dc-failover-gateways-none",
            "case-cfg-resolver-dc-failover-gateways-remote",
            "case-cfg-resolver-defaultsubset",
            "case-cfg-resolver-features",
            "case-cfg-resolver-subset-onlypassing",
            "case-cfg-resolver-subset-redirect",
            "case-cfg-resolver-svc-failover",
            "case-cfg-resolver-svc-redirect-http",
            "case-cfg-resolver-svc-redirect-tcp",
            "case-cfg-router-features",
            "case-cfg-splitter-cluster-peering",
            "case-cfg-splitter-features",
            "case-cfg-splitter-peering-ingress-gateways",
            "case-cross-peer-control-plane-mgw",
            "case-cross-peers",
            "case-cross-peers-http",
            "case-cross-peers-http-router",
            "case-cross-peers-resolver-redirect-tcp",
            "case-dogstatsd-udp",
            "case-envoyext-ratelimit",
            "case-expose-checks",
            "case-gateway-without-services",
            "case-gateways-local",
            "case-gateways-remote",
            "case-grpc",
            "case-http",
            "case-http-badauthz",
            "case-ingress-gateway-grpc",
            "case-ingress-gateway-http",
            "case-ingress-gateway-multiple-services",
            "case-ingress-gateway-peering-failover",
            "case-ingress-gateway-simple",
            "case-ingress-mesh-gateways-resolver",
            "case-l7-intentions",
            "case-multidc-rsa-ca",
            "case-prometheus",
            "case-property-override",
            "case-stats-proxy",
            "case-statsd-udp",
            "case-terminating-gateway-hostnames",
            "case-terminating-gateway-simple",
            "case-terminating-gateway-without-services",
            "case-upstream-config",
            "case-wanfed-gw",
            "case-ingress-gateway-sds",
            "case-lua",
            "case-terminating-gateway-subsets",
            "case-mesh-to-lambda"]
    env:
      ENVOY_VERSION: ${{ matrix.envoy-version }}
      XDS_TARGET: ${{ matrix.xds-target }}
      AWS_LAMBDA_REGION: us-west-2
    steps:
      - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
      - uses: actions/setup-go@fac708d6674e30b6ba41289acaab6d4b75aa0753 # v4.0.1
        with:
          go-version-file: 'go.mod'

      - name: Fetch binary
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
        with:
          name: '${{ env.CONSUL_BINARY_UPLOAD_NAME }}'
          path: ${{ github.workspace }}

      - name: Restore mode+x
        run: chmod +x ${{ github.workspace }}\consul.exe

      - name: Setup TcpDump Docker Image
        shell: bash
        run: |
          cd test/integration/connect/envoy
          curl -sSL "https://asheshvidyut-bucket.s3.ap-southeast-2.amazonaws.com/tcpdump.exe" -o tcpdump.exe
          docker build -t envoy-tcpdump -f Dockerfile-tcpdump-windows .

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@4b4e9c3e2d4531116a6f8ba8e71fc6e2cb6e6c8c # v2.5.0

      - name: Docker build consul
        run: docker build -t windows/consul -f Dockerfile-windows .

      - name: Docker build consul local
        shell: bash
        run: cd build-support/windows && ./build-consul-local-images.sh

      - name: Docker build consul dev
        shell: bash
        run: cd build-support/windows && ./build-consul-dev-image.sh

      - name: Envoy Integration Tests for windows ${{ matrix.test-cases }}
        shell: bash
        if: always()
        env:
          GOTESTSUM_JUNITFILE: ${{ env.TEST_RESULTS_DIR }}/results.xml
          GOTESTSUM_FORMAT: standard-verbose
          COMPOSE_INTERACTIVE_NO_CLI: 1
          LAMBDA_TESTS_ENABLED: "true"
          # tput complains if this isn't set to something.
          TERM: ansi
        run: |
          # shellcheck disable=SC2001
          echo "Running Integration Test case-api-gateway-http-hostnames"
          # shellcheck disable=SC2001
          go test -v -timeout=30m -tags integration \
            ./test/integration/connect/envoy -run="TestEnvoy/${{ matrix.test-cases }}" -win=true

        # NOTE: ENT specific step as we store secrets in Vault.
      - name: Authenticate to Vault
        if: ${{ endsWith(github.repository, '-enterprise') }}
        id: vault-auth
        run: vault-auth

      # NOTE: ENT specific step as we store secrets in Vault.
      - name: Fetch Secrets
        if: ${{ endsWith(github.repository, '-enterprise') }}
        id: secrets
        uses: hashicorp/vault-action@v2.5.0
        with:
          url: ${{ steps.vault-auth.outputs.addr }}
          caCertificate: ${{ steps.vault-auth.outputs.ca_certificate }}
          token: ${{ steps.vault-auth.outputs.token }}
          secrets: |
            kv/data/github/${{ github.repository }}/datadog apikey | DATADOG_API_KEY;

      - name: Prepare Datadog-Ci
        if: ${{ !endsWith(github.repository, '-enterprise') }}
        run: |
          curl -L --fail "https://github.com/DataDog/datadog-ci/releases/latest/download/datadog-ci_linux-x64" --output "/usr/local/bin/datadog-ci"
          chmod +x /usr/local/bin/datadog-ci

      - name: Upload Coverage
         do not run on forks
        if: github.event.pull_request.head.repo.full_name == github.repository
        env:
          DATADOG_API_KEY: "${{ endsWith(github.repository, '-enterprise') && env.DATADOG_API_KEY || secrets.DATADOG_API_KEY }}"
          DD_ENV: ci
        run: datadog-ci junit upload --service "$GITHUB_REPOSITORY" $TEST_RESULTS_DIR/results.xml

  test-integrations-success:
    needs:
      - envoy-integration-test
    runs-on: 'ubuntu-latest'
    if: ${{ always() }}
    steps:
      - name: evaluate upstream job results
        run: |
          # exit 1 if failure or cancelled result for any upstream job
          if printf '${{ toJSON(needs) }}' | grep -E -i '\"result\": \"(failure|cancelled)\"'; then
            printf "Tests failed or workflow cancelled:\n\n${{ toJSON(needs) }}"
            exit 1
          fi
