# Copyright (c) HashiCorp, Inc.
# SPDX-License-Identifier: MPL-2.0

name: test-integrations-windows

on:
  pull_request:
    branches-ignore:
      - stable-website
      - 'docs/**'
      - 'ui/**'
      - 'mktg-**' # Digital Team Terraform-generated branch prefix
      - 'backport/docs/**'
      - 'backport/ui/**'
      - 'backport/mktg-**'

env:
  TEST_RESULTS_DIR: /tmp/test-results
  TEST_RESULTS_ARTIFACT_NAME: test-results
  CONSUL_LICENSE: ${{ secrets.CONSUL_LICENSE }}
  GOTAGS: ${{ endsWith(github.repository, '-enterprise') && 'consulent' || '' }}
  GOTESTSUM_VERSION: "1.9.0"
  CONSUL_BINARY_UPLOAD_NAME: consul.exe
  # strip the hashicorp/ off the front of github.repository for consul
  CONSUL_LATEST_IMAGE_NAME: ${{ endsWith(github.repository, '-enterprise') && github.repository || 'consul' }}
  GOPRIVATE: github.com/hashicorp # Required for enterprise deps

jobs:
  setup:
    runs-on: ubuntu-latest
    name: Setup
    outputs:
      compute-small: ${{ steps.runners.outputs.compute-small }}
      compute-medium: ${{ steps.runners.outputs.compute-medium }}
      compute-large: ${{ steps.runners.outputs.compute-large }}
      compute-xl: ${{ steps.runners.outputs.compute-xl }}
      enterprise: ${{ steps.runners.outputs.enterprise }}
    steps:
      - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
      - id: runners
        run: .github/scripts/get_runner_classes_windows.sh

  dev-build:
    uses: ./.github/workflows/reusable-dev-build-windows.yml
    with:
      runs-on: ${{ needs.setup.outputs.compute-xl }}
      repository-name: ${{ github.repository }}
      uploaded-binary-name: 'consul.exe'
    secrets:
      elevated-github-token: ${{ secrets.ELEVATED_GITHUB_TOKEN }}

  #  Skipping case-ingress-gateway-tls because of - cacert is not available in curl windows
  #  https://www.phillipsj.net/posts/windows-curl-and-self-signed-certs/
  #  Skipping case-wasm because - https://www.envoyproxy.io/docs/envoy/latest/configuration/http/http_filters/wasm_filter
  generate-envoy-job-matrices:
    needs: [ setup ]
    runs-on: ubuntu-latest
    name: Generate Envoy Job Matrices
    outputs:
      envoy-matrix: ${{ steps.set-matrix.outputs.envoy-matrix }}
    steps:
      - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
      - name: Generate Envoy Job Matrix
        id: set-matrix
        env:
          # this is further going to multiplied in envoy-integration tests by the
          # other dimensions in the matrix.  Currently TOTAL_RUNNERS would be
          # multiplied by 8 based on these values:
          # envoy-version: ["1.23.10", "1.24.8", "1.25.7", "1.26.2"]
          # xds-target: ["server", "client"]
          TOTAL_RUNNERS: 4
          JQ_SLICER: '[ inputs ] | [_nwise(length / $runnercount | floor)]'
        run: |
          NUM_RUNNERS=$TOTAL_RUNNERS
          NUM_DIRS=$(find ./test/integration/connect/envoy -mindepth 1 -maxdepth 1 -type d | wc -l)

          if [ "$NUM_DIRS" -lt "$NUM_RUNNERS" ]; then
            echo "TOTAL_RUNNERS is larger than the number of tests/packages to split."
            NUM_RUNNERS=$((NUM_DIRS-1))
          fi
          # fix issue where test splitting calculation generates 1 more split than TOTAL_RUNNERS.
          NUM_RUNNERS=$((NUM_RUNNERS-1))
          {
            echo -n "envoy-matrix="
            find ./test/integration/connect/envoy -maxdepth 1 -type d -print0 \
              | grep -z -v "case-wasm" \
              | grep -z -v "case-consul-exec" \
              | grep -z -v "case-ingress-gateway-tls" \
              | xargs -0 -n 1 basename \
              | jq --raw-input --argjson runnercount "$NUM_RUNNERS" "$JQ_SLICER" \
              | jq --compact-output 'map(join("|"))'
          } >> "$GITHUB_OUTPUT"

  # NOTE: Jobs needs to be added here manually. Jobs when run together on windows fails intermittently.
  # So they are run independently of each other.
  envoy-integration-test:
    needs:
      - setup
      - generate-envoy-job-matrices
      - dev-build
    runs-on: ${{ fromJSON(needs.setup.outputs.compute-large) }}
    permissions:
      id-token: write # NOTE: this permission is explicitly required for Vault auth.
      contents: read
    strategy:
      fail-fast: false
      matrix:
        envoy-version: [ "1.23.10", "1.24.8", "1.25.7", "1.26.2" ]
        xds-target: [ "server", "client" ]
        test-cases: ${{ fromJSON(needs.generate-envoy-job-matrices.outputs.envoy-matrix) }}
    env:
      ENVOY_VERSION: ${{ matrix.envoy-version }}
      XDS_TARGET: ${{ matrix.xds-target }}
      AWS_LAMBDA_REGION: us-west-2
    steps:
      - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab # v3.5.2
      - uses: actions/setup-go@fac708d6674e30b6ba41289acaab6d4b75aa0753 # v4.0.1
        with:
          go-version-file: 'go.mod'

      - name: Fetch binary
        uses: actions/download-artifact@9bc31d5ccc31df68ecc42ccf4149144866c47d8a # v3.0.2
        with:
          name: '${{ env.CONSUL_BINARY_UPLOAD_NAME }}'
          path: ${{ github.workspace }}

      - name: Restore mode+x
        run: chmod +x ${{ github.workspace }}\consul.exe

      - name: Setup TcpDump Docker Image
        shell: bash
        run: |
          cd test/integration/connect/envoy
          curl -sSL "https://asheshvidyut-bucket.s3.ap-southeast-2.amazonaws.com/tcpdump.exe" -o tcpdump.exe
          docker build -t envoy-tcpdump -f Dockerfile-tcpdump-windows .

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@4b4e9c3e2d4531116a6f8ba8e71fc6e2cb6e6c8c # v2.5.0

      - name: Docker build consul
        run: docker build -t windows/consul -f Dockerfile-windows .

      - name: Docker build consul local
        shell: bash
        run: cd build-support/windows && ./build-consul-local-images.sh

      - name: Docker build consul dev
        shell: bash
        run: cd build-support/windows && ./build-consul-dev-image.sh

      # https://hashicorp.atlassian.net/browse/NET-4973
      # ^ Ticket to figure out why grouping test case is failing on Windows Machine
      - name: Envoy Integration Tests for windows case-terminating-gateway-subsets
        shell: bash
        if: always()
        env:
          GOTESTSUM_JUNITFILE: ${{ env.TEST_RESULTS_DIR }}/results.xml
          GOTESTSUM_FORMAT: standard-verbose
          COMPOSE_INTERACTIVE_NO_CLI: 1
          LAMBDA_TESTS_ENABLED: "true"
          # tput complains if this isn't set to something.
          TERM: ansi
        run: |
          # shellcheck disable=SC2001
          echo "Running $(sed 's,|, ,g' <<< "${{ matrix.test-cases }}" |wc -w) subtests"
          # shellcheck disable=SC2001
          sed 's,|,\n,g' <<< "${{ matrix.test-cases }}"
          go run gotest.tools/gotestsum@v${{env.GOTESTSUM_VERSION}} \
              --debug \
              --rerun-fails \
              --rerun-fails-report=/tmp/gotestsum-rerun-fails \
              --jsonfile /tmp/jsonfile/go-test.log \
              --packages=./test/integration/connect/envoy \
              -- -timeout=30m -tags integration -run="TestEnvoy/(${{ matrix.test-cases }})"

        # NOTE: ENT specific step as we store secrets in Vault.
      - name: Authenticate to Vault
        if: ${{ endsWith(github.repository, '-enterprise') }}
        id: vault-auth
        run: vault-auth

      # NOTE: ENT specific step as we store secrets in Vault.
      - name: Fetch Secrets
        if: ${{ endsWith(github.repository, '-enterprise') }}
        id: secrets
        uses: hashicorp/vault-action@v2.5.0
        with:
          url: ${{ steps.vault-auth.outputs.addr }}
          caCertificate: ${{ steps.vault-auth.outputs.ca_certificate }}
          token: ${{ steps.vault-auth.outputs.token }}
          secrets: |
            kv/data/github/${{ github.repository }}/datadog apikey | DATADOG_API_KEY;
            
      - name: Prepare datadog-ci
        shell: bash
        if: ${{ !endsWith(github.repository, '-enterprise') }}
        run: |
          curl -L --fail "https://github.com/DataDog/datadog-ci/releases/download/v2.17.2/datadog-ci_win-x64.exe" --output "C:/datadog-ci"
          chmod +x C:/datadog-ci

      - name: Upload coverage
        # do not run on forks
        if: github.event.pull_request.head.repo.full_name == github.repository
        env:
          DATADOG_API_KEY: "${{ endsWith(github.repository, '-enterprise') && env.DATADOG_API_KEY || secrets.DATADOG_API_KEY }}"
          DD_ENV: ci
        run: C:/datadog-ci junit upload --service "$GITHUB_REPOSITORY" $TEST_RESULTS_DIR/results.xml

  test-integrations-success:
    needs:
      - envoy-integration-test
    runs-on: 'ubuntu-latest'
    if: ${{ always() }}
    steps:
      - name: evaluate upstream job results
        run: |
          # exit 1 if failure or cancelled result for any upstream job
          if printf '${{ toJSON(needs) }}' | grep -E -i '\"result\": \"(failure|cancelled)\"'; then
            printf "Tests failed or workflow cancelled:\n\n${{ toJSON(needs) }}"
            exit 1
          fi
