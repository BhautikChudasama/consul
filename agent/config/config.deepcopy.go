// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: BUSL-1.1

// generated by deep-copy -pointer-receiver -o ./config.deepcopy.go -type RuntimeConfig ./; DO NOT EDIT.

package config

import (
	"net"
	"time"

	"github.com/armon/go-metrics"
	"github.com/armon/go-metrics/prometheus"

	"github.com/hashicorp/consul/agent/structs"
	"github.com/hashicorp/consul/types"
)

// DeepCopy generates a deep copy of *RuntimeConfig
func (o *RuntimeConfig) DeepCopy() *RuntimeConfig {
	var cp RuntimeConfig = *o
	if o.DNSServiceTTL != nil {
		cp.DNSServiceTTL = make(map[string]time.Duration, len(o.DNSServiceTTL))
		for k2, v2 := range o.DNSServiceTTL {
			cp.DNSServiceTTL[k2] = v2
		}
	}
	if o.DNSRecursors != nil {
		cp.DNSRecursors = make([]string, len(o.DNSRecursors))
		copy(cp.DNSRecursors, o.DNSRecursors)
	}
	if o.HTTPBlockEndpoints != nil {
		cp.HTTPBlockEndpoints = make([]string, len(o.HTTPBlockEndpoints))
		copy(cp.HTTPBlockEndpoints, o.HTTPBlockEndpoints)
	}
	if o.AllowWriteHTTPFrom != nil {
		cp.AllowWriteHTTPFrom = make([]*net.IPNet, len(o.AllowWriteHTTPFrom))
		copy(cp.AllowWriteHTTPFrom, o.AllowWriteHTTPFrom)
		for i2 := range o.AllowWriteHTTPFrom {
			if o.AllowWriteHTTPFrom[i2] != nil {
				cp.AllowWriteHTTPFrom[i2] = new(net.IPNet)
				*cp.AllowWriteHTTPFrom[i2] = *o.AllowWriteHTTPFrom[i2]
				if o.AllowWriteHTTPFrom[i2].IP != nil {
					cp.AllowWriteHTTPFrom[i2].IP = make([]byte, len(o.AllowWriteHTTPFrom[i2].IP))
					copy(cp.AllowWriteHTTPFrom[i2].IP, o.AllowWriteHTTPFrom[i2].IP)
				}
				if o.AllowWriteHTTPFrom[i2].Mask != nil {
					cp.AllowWriteHTTPFrom[i2].Mask = make([]byte, len(o.AllowWriteHTTPFrom[i2].Mask))
					copy(cp.AllowWriteHTTPFrom[i2].Mask, o.AllowWriteHTTPFrom[i2].Mask)
				}
			}
		}
	}
	if o.HTTPResponseHeaders != nil {
		cp.HTTPResponseHeaders = make(map[string]string, len(o.HTTPResponseHeaders))
		for k2, v2 := range o.HTTPResponseHeaders {
			cp.HTTPResponseHeaders[k2] = v2
		}
	}
	if o.Telemetry.DogstatsdTags != nil {
		cp.Telemetry.DogstatsdTags = make([]string, len(o.Telemetry.DogstatsdTags))
		copy(cp.Telemetry.DogstatsdTags, o.Telemetry.DogstatsdTags)
	}
	if o.Telemetry.AllowedPrefixes != nil {
		cp.Telemetry.AllowedPrefixes = make([]string, len(o.Telemetry.AllowedPrefixes))
		copy(cp.Telemetry.AllowedPrefixes, o.Telemetry.AllowedPrefixes)
	}
	if o.Telemetry.BlockedPrefixes != nil {
		cp.Telemetry.BlockedPrefixes = make([]string, len(o.Telemetry.BlockedPrefixes))
		copy(cp.Telemetry.BlockedPrefixes, o.Telemetry.BlockedPrefixes)
	}
	if o.Telemetry.PrometheusOpts.GaugeDefinitions != nil {
		cp.Telemetry.PrometheusOpts.GaugeDefinitions = make([]prometheus.GaugeDefinition, len(o.Telemetry.PrometheusOpts.GaugeDefinitions))
		copy(cp.Telemetry.PrometheusOpts.GaugeDefinitions, o.Telemetry.PrometheusOpts.GaugeDefinitions)
		for i4 := range o.Telemetry.PrometheusOpts.GaugeDefinitions {
			if o.Telemetry.PrometheusOpts.GaugeDefinitions[i4].Name != nil {
				cp.Telemetry.PrometheusOpts.GaugeDefinitions[i4].Name = make([]string, len(o.Telemetry.PrometheusOpts.GaugeDefinitions[i4].Name))
				copy(cp.Telemetry.PrometheusOpts.GaugeDefinitions[i4].Name, o.Telemetry.PrometheusOpts.GaugeDefinitions[i4].Name)
			}
			if o.Telemetry.PrometheusOpts.GaugeDefinitions[i4].ConstLabels != nil {
				cp.Telemetry.PrometheusOpts.GaugeDefinitions[i4].ConstLabels = make([]metrics.Label, len(o.Telemetry.PrometheusOpts.GaugeDefinitions[i4].ConstLabels))
				copy(cp.Telemetry.PrometheusOpts.GaugeDefinitions[i4].ConstLabels, o.Telemetry.PrometheusOpts.GaugeDefinitions[i4].ConstLabels)
			}
		}
	}
	if o.Telemetry.PrometheusOpts.SummaryDefinitions != nil {
		cp.Telemetry.PrometheusOpts.SummaryDefinitions = make([]prometheus.SummaryDefinition, len(o.Telemetry.PrometheusOpts.SummaryDefinitions))
		copy(cp.Telemetry.PrometheusOpts.SummaryDefinitions, o.Telemetry.PrometheusOpts.SummaryDefinitions)
		for i4 := range o.Telemetry.PrometheusOpts.SummaryDefinitions {
			if o.Telemetry.PrometheusOpts.SummaryDefinitions[i4].Name != nil {
				cp.Telemetry.PrometheusOpts.SummaryDefinitions[i4].Name = make([]string, len(o.Telemetry.PrometheusOpts.SummaryDefinitions[i4].Name))
				copy(cp.Telemetry.PrometheusOpts.SummaryDefinitions[i4].Name, o.Telemetry.PrometheusOpts.SummaryDefinitions[i4].Name)
			}
			if o.Telemetry.PrometheusOpts.SummaryDefinitions[i4].ConstLabels != nil {
				cp.Telemetry.PrometheusOpts.SummaryDefinitions[i4].ConstLabels = make([]metrics.Label, len(o.Telemetry.PrometheusOpts.SummaryDefinitions[i4].ConstLabels))
				copy(cp.Telemetry.PrometheusOpts.SummaryDefinitions[i4].ConstLabels, o.Telemetry.PrometheusOpts.SummaryDefinitions[i4].ConstLabels)
			}
		}
	}
	if o.Telemetry.PrometheusOpts.CounterDefinitions != nil {
		cp.Telemetry.PrometheusOpts.CounterDefinitions = make([]prometheus.CounterDefinition, len(o.Telemetry.PrometheusOpts.CounterDefinitions))
		copy(cp.Telemetry.PrometheusOpts.CounterDefinitions, o.Telemetry.PrometheusOpts.CounterDefinitions)
		for i4 := range o.Telemetry.PrometheusOpts.CounterDefinitions {
			if o.Telemetry.PrometheusOpts.CounterDefinitions[i4].Name != nil {
				cp.Telemetry.PrometheusOpts.CounterDefinitions[i4].Name = make([]string, len(o.Telemetry.PrometheusOpts.CounterDefinitions[i4].Name))
				copy(cp.Telemetry.PrometheusOpts.CounterDefinitions[i4].Name, o.Telemetry.PrometheusOpts.CounterDefinitions[i4].Name)
			}
			if o.Telemetry.PrometheusOpts.CounterDefinitions[i4].ConstLabels != nil {
				cp.Telemetry.PrometheusOpts.CounterDefinitions[i4].ConstLabels = make([]metrics.Label, len(o.Telemetry.PrometheusOpts.CounterDefinitions[i4].ConstLabels))
				copy(cp.Telemetry.PrometheusOpts.CounterDefinitions[i4].ConstLabels, o.Telemetry.PrometheusOpts.CounterDefinitions[i4].ConstLabels)
			}
		}
	}
	if o.AdvertiseAddrLAN != nil {
		cp.AdvertiseAddrLAN = new(net.IPAddr)
		*cp.AdvertiseAddrLAN = *o.AdvertiseAddrLAN
		if o.AdvertiseAddrLAN.IP != nil {
			cp.AdvertiseAddrLAN.IP = make([]byte, len(o.AdvertiseAddrLAN.IP))
			copy(cp.AdvertiseAddrLAN.IP, o.AdvertiseAddrLAN.IP)
		}
	}
	if o.AdvertiseAddrWAN != nil {
		cp.AdvertiseAddrWAN = new(net.IPAddr)
		*cp.AdvertiseAddrWAN = *o.AdvertiseAddrWAN
		if o.AdvertiseAddrWAN.IP != nil {
			cp.AdvertiseAddrWAN.IP = make([]byte, len(o.AdvertiseAddrWAN.IP))
			copy(cp.AdvertiseAddrWAN.IP, o.AdvertiseAddrWAN.IP)
		}
	}
	if o.BindAddr != nil {
		cp.BindAddr = new(net.IPAddr)
		*cp.BindAddr = *o.BindAddr
		if o.BindAddr.IP != nil {
			cp.BindAddr.IP = make([]byte, len(o.BindAddr.IP))
			copy(cp.BindAddr.IP, o.BindAddr.IP)
		}
	}
	if o.Checks != nil {
		cp.Checks = make([]*structs.CheckDefinition, len(o.Checks))
		copy(cp.Checks, o.Checks)
		for i2 := range o.Checks {
			if o.Checks[i2] != nil {
				cp.Checks[i2] = new(structs.CheckDefinition)
				*cp.Checks[i2] = *o.Checks[i2]
				if o.Checks[i2].ScriptArgs != nil {
					cp.Checks[i2].ScriptArgs = make([]string, len(o.Checks[i2].ScriptArgs))
					copy(cp.Checks[i2].ScriptArgs, o.Checks[i2].ScriptArgs)
				}
				if o.Checks[i2].Header != nil {
					cp.Checks[i2].Header = make(map[string][]string, len(o.Checks[i2].Header))
					for k5, v5 := range o.Checks[i2].Header {
						var cp_Checks_i2_Header_v5 []string
						if v5 != nil {
							cp_Checks_i2_Header_v5 = make([]string, len(v5))
							copy(cp_Checks_i2_Header_v5, v5)
						}
						cp.Checks[i2].Header[k5] = cp_Checks_i2_Header_v5
					}
				}
			}
		}
	}
	if o.ClientAddrs != nil {
		cp.ClientAddrs = make([]*net.IPAddr, len(o.ClientAddrs))
		copy(cp.ClientAddrs, o.ClientAddrs)
		for i2 := range o.ClientAddrs {
			if o.ClientAddrs[i2] != nil {
				cp.ClientAddrs[i2] = new(net.IPAddr)
				*cp.ClientAddrs[i2] = *o.ClientAddrs[i2]
				if o.ClientAddrs[i2].IP != nil {
					cp.ClientAddrs[i2].IP = make([]byte, len(o.ClientAddrs[i2].IP))
					copy(cp.ClientAddrs[i2].IP, o.ClientAddrs[i2].IP)
				}
			}
		}
	}
	if o.ConfigEntryBootstrap != nil {
		cp.ConfigEntryBootstrap = make([]structs.ConfigEntry, len(o.ConfigEntryBootstrap))
		copy(cp.ConfigEntryBootstrap, o.ConfigEntryBootstrap)
	}
	if o.AutoEncryptDNSSAN != nil {
		cp.AutoEncryptDNSSAN = make([]string, len(o.AutoEncryptDNSSAN))
		copy(cp.AutoEncryptDNSSAN, o.AutoEncryptDNSSAN)
	}
	if o.AutoEncryptIPSAN != nil {
		cp.AutoEncryptIPSAN = make([]net.IP, len(o.AutoEncryptIPSAN))
		copy(cp.AutoEncryptIPSAN, o.AutoEncryptIPSAN)
		for i2 := range o.AutoEncryptIPSAN {
			if o.AutoEncryptIPSAN[i2] != nil {
				cp.AutoEncryptIPSAN[i2] = make([]byte, len(o.AutoEncryptIPSAN[i2]))
				copy(cp.AutoEncryptIPSAN[i2], o.AutoEncryptIPSAN[i2])
			}
		}
	}
	if o.AutoConfig.ServerAddresses != nil {
		cp.AutoConfig.ServerAddresses = make([]string, len(o.AutoConfig.ServerAddresses))
		copy(cp.AutoConfig.ServerAddresses, o.AutoConfig.ServerAddresses)
	}
	if o.AutoConfig.DNSSANs != nil {
		cp.AutoConfig.DNSSANs = make([]string, len(o.AutoConfig.DNSSANs))
		copy(cp.AutoConfig.DNSSANs, o.AutoConfig.DNSSANs)
	}
	if o.AutoConfig.IPSANs != nil {
		cp.AutoConfig.IPSANs = make([]net.IP, len(o.AutoConfig.IPSANs))
		copy(cp.AutoConfig.IPSANs, o.AutoConfig.IPSANs)
		for i3 := range o.AutoConfig.IPSANs {
			if o.AutoConfig.IPSANs[i3] != nil {
				cp.AutoConfig.IPSANs[i3] = make([]byte, len(o.AutoConfig.IPSANs[i3]))
				copy(cp.AutoConfig.IPSANs[i3], o.AutoConfig.IPSANs[i3])
			}
		}
	}
	if o.AutoConfig.Authorizer.AuthMethod.Config != nil {
		cp.AutoConfig.Authorizer.AuthMethod.Config = make(map[string]interface{}, len(o.AutoConfig.Authorizer.AuthMethod.Config))
		for k5, v5 := range o.AutoConfig.Authorizer.AuthMethod.Config {
			cp.AutoConfig.Authorizer.AuthMethod.Config[k5] = v5
		}
	}
	if o.AutoConfig.Authorizer.ClaimAssertions != nil {
		cp.AutoConfig.Authorizer.ClaimAssertions = make([]string, len(o.AutoConfig.Authorizer.ClaimAssertions))
		copy(cp.AutoConfig.Authorizer.ClaimAssertions, o.AutoConfig.Authorizer.ClaimAssertions)
	}
	if o.ConnectCAConfig != nil {
		cp.ConnectCAConfig = make(map[string]interface{}, len(o.ConnectCAConfig))
		for k2, v2 := range o.ConnectCAConfig {
			cp.ConnectCAConfig[k2] = v2
		}
	}
	if o.DNSAddrs != nil {
		cp.DNSAddrs = make([]net.Addr, len(o.DNSAddrs))
		copy(cp.DNSAddrs, o.DNSAddrs)
	}
	if o.GRPCAddrs != nil {
		cp.GRPCAddrs = make([]net.Addr, len(o.GRPCAddrs))
		copy(cp.GRPCAddrs, o.GRPCAddrs)
	}
	if o.GRPCTLSAddrs != nil {
		cp.GRPCTLSAddrs = make([]net.Addr, len(o.GRPCTLSAddrs))
		copy(cp.GRPCTLSAddrs, o.GRPCTLSAddrs)
	}
	if o.HTTPAddrs != nil {
		cp.HTTPAddrs = make([]net.Addr, len(o.HTTPAddrs))
		copy(cp.HTTPAddrs, o.HTTPAddrs)
	}
	if o.HTTPSAddrs != nil {
		cp.HTTPSAddrs = make([]net.Addr, len(o.HTTPSAddrs))
		copy(cp.HTTPSAddrs, o.HTTPSAddrs)
	}
	if o.Locality != nil {
		cp.Locality = new(Locality)
		*cp.Locality = *o.Locality
		if o.Locality.Region != nil {
			cp.Locality.Region = new(string)
			*cp.Locality.Region = *o.Locality.Region
		}
		if o.Locality.Zone != nil {
			cp.Locality.Zone = new(string)
			*cp.Locality.Zone = *o.Locality.Zone
		}
	}
	if o.NodeMeta != nil {
		cp.NodeMeta = make(map[string]string, len(o.NodeMeta))
		for k2, v2 := range o.NodeMeta {
			cp.NodeMeta[k2] = v2
		}
	}
	if o.PrimaryGateways != nil {
		cp.PrimaryGateways = make([]string, len(o.PrimaryGateways))
		copy(cp.PrimaryGateways, o.PrimaryGateways)
	}
	if o.RPCAdvertiseAddr != nil {
		cp.RPCAdvertiseAddr = new(net.TCPAddr)
		*cp.RPCAdvertiseAddr = *o.RPCAdvertiseAddr
		if o.RPCAdvertiseAddr.IP != nil {
			cp.RPCAdvertiseAddr.IP = make([]byte, len(o.RPCAdvertiseAddr.IP))
			copy(cp.RPCAdvertiseAddr.IP, o.RPCAdvertiseAddr.IP)
		}
	}
	if o.RPCBindAddr != nil {
		cp.RPCBindAddr = new(net.TCPAddr)
		*cp.RPCBindAddr = *o.RPCBindAddr
		if o.RPCBindAddr.IP != nil {
			cp.RPCBindAddr.IP = make([]byte, len(o.RPCBindAddr.IP))
			copy(cp.RPCBindAddr.IP, o.RPCBindAddr.IP)
		}
	}
	if o.RetryJoinLAN != nil {
		cp.RetryJoinLAN = make([]string, len(o.RetryJoinLAN))
		copy(cp.RetryJoinLAN, o.RetryJoinLAN)
	}
	if o.RetryJoinWAN != nil {
		cp.RetryJoinWAN = make([]string, len(o.RetryJoinWAN))
		copy(cp.RetryJoinWAN, o.RetryJoinWAN)
	}
	if o.Segments != nil {
		cp.Segments = make([]structs.NetworkSegment, len(o.Segments))
		copy(cp.Segments, o.Segments)
		for i2 := range o.Segments {
			if o.Segments[i2].Bind != nil {
				cp.Segments[i2].Bind = new(net.TCPAddr)
				*cp.Segments[i2].Bind = *o.Segments[i2].Bind
				if o.Segments[i2].Bind.IP != nil {
					cp.Segments[i2].Bind.IP = make([]byte, len(o.Segments[i2].Bind.IP))
					copy(cp.Segments[i2].Bind.IP, o.Segments[i2].Bind.IP)
				}
			}
			if o.Segments[i2].Advertise != nil {
				cp.Segments[i2].Advertise = new(net.TCPAddr)
				*cp.Segments[i2].Advertise = *o.Segments[i2].Advertise
				if o.Segments[i2].Advertise.IP != nil {
					cp.Segments[i2].Advertise.IP = make([]byte, len(o.Segments[i2].Advertise.IP))
					copy(cp.Segments[i2].Advertise.IP, o.Segments[i2].Advertise.IP)
				}
			}
		}
	}
	if o.SerfAdvertiseAddrLAN != nil {
		cp.SerfAdvertiseAddrLAN = new(net.TCPAddr)
		*cp.SerfAdvertiseAddrLAN = *o.SerfAdvertiseAddrLAN
		if o.SerfAdvertiseAddrLAN.IP != nil {
			cp.SerfAdvertiseAddrLAN.IP = make([]byte, len(o.SerfAdvertiseAddrLAN.IP))
			copy(cp.SerfAdvertiseAddrLAN.IP, o.SerfAdvertiseAddrLAN.IP)
		}
	}
	if o.SerfAdvertiseAddrWAN != nil {
		cp.SerfAdvertiseAddrWAN = new(net.TCPAddr)
		*cp.SerfAdvertiseAddrWAN = *o.SerfAdvertiseAddrWAN
		if o.SerfAdvertiseAddrWAN.IP != nil {
			cp.SerfAdvertiseAddrWAN.IP = make([]byte, len(o.SerfAdvertiseAddrWAN.IP))
			copy(cp.SerfAdvertiseAddrWAN.IP, o.SerfAdvertiseAddrWAN.IP)
		}
	}
	if o.SerfAllowedCIDRsLAN != nil {
		cp.SerfAllowedCIDRsLAN = make([]net.IPNet, len(o.SerfAllowedCIDRsLAN))
		copy(cp.SerfAllowedCIDRsLAN, o.SerfAllowedCIDRsLAN)
		for i2 := range o.SerfAllowedCIDRsLAN {
			if o.SerfAllowedCIDRsLAN[i2].IP != nil {
				cp.SerfAllowedCIDRsLAN[i2].IP = make([]byte, len(o.SerfAllowedCIDRsLAN[i2].IP))
				copy(cp.SerfAllowedCIDRsLAN[i2].IP, o.SerfAllowedCIDRsLAN[i2].IP)
			}
			if o.SerfAllowedCIDRsLAN[i2].Mask != nil {
				cp.SerfAllowedCIDRsLAN[i2].Mask = make([]byte, len(o.SerfAllowedCIDRsLAN[i2].Mask))
				copy(cp.SerfAllowedCIDRsLAN[i2].Mask, o.SerfAllowedCIDRsLAN[i2].Mask)
			}
		}
	}
	if o.SerfAllowedCIDRsWAN != nil {
		cp.SerfAllowedCIDRsWAN = make([]net.IPNet, len(o.SerfAllowedCIDRsWAN))
		copy(cp.SerfAllowedCIDRsWAN, o.SerfAllowedCIDRsWAN)
		for i2 := range o.SerfAllowedCIDRsWAN {
			if o.SerfAllowedCIDRsWAN[i2].IP != nil {
				cp.SerfAllowedCIDRsWAN[i2].IP = make([]byte, len(o.SerfAllowedCIDRsWAN[i2].IP))
				copy(cp.SerfAllowedCIDRsWAN[i2].IP, o.SerfAllowedCIDRsWAN[i2].IP)
			}
			if o.SerfAllowedCIDRsWAN[i2].Mask != nil {
				cp.SerfAllowedCIDRsWAN[i2].Mask = make([]byte, len(o.SerfAllowedCIDRsWAN[i2].Mask))
				copy(cp.SerfAllowedCIDRsWAN[i2].Mask, o.SerfAllowedCIDRsWAN[i2].Mask)
			}
		}
	}
	if o.SerfBindAddrLAN != nil {
		cp.SerfBindAddrLAN = new(net.TCPAddr)
		*cp.SerfBindAddrLAN = *o.SerfBindAddrLAN
		if o.SerfBindAddrLAN.IP != nil {
			cp.SerfBindAddrLAN.IP = make([]byte, len(o.SerfBindAddrLAN.IP))
			copy(cp.SerfBindAddrLAN.IP, o.SerfBindAddrLAN.IP)
		}
	}
	if o.SerfBindAddrWAN != nil {
		cp.SerfBindAddrWAN = new(net.TCPAddr)
		*cp.SerfBindAddrWAN = *o.SerfBindAddrWAN
		if o.SerfBindAddrWAN.IP != nil {
			cp.SerfBindAddrWAN.IP = make([]byte, len(o.SerfBindAddrWAN.IP))
			copy(cp.SerfBindAddrWAN.IP, o.SerfBindAddrWAN.IP)
		}
	}
	if o.Services != nil {
		cp.Services = make([]*structs.ServiceDefinition, len(o.Services))
		copy(cp.Services, o.Services)
		for i2 := range o.Services {
			if o.Services[i2] != nil {
				cp.Services[i2] = o.Services[i2].DeepCopy()
			}
		}
	}
	if o.TLS.InternalRPC.CipherSuites != nil {
		cp.TLS.InternalRPC.CipherSuites = make([]types.TLSCipherSuite, len(o.TLS.InternalRPC.CipherSuites))
		copy(cp.TLS.InternalRPC.CipherSuites, o.TLS.InternalRPC.CipherSuites)
	}
	if o.TLS.GRPC.CipherSuites != nil {
		cp.TLS.GRPC.CipherSuites = make([]types.TLSCipherSuite, len(o.TLS.GRPC.CipherSuites))
		copy(cp.TLS.GRPC.CipherSuites, o.TLS.GRPC.CipherSuites)
	}
	if o.TLS.HTTPS.CipherSuites != nil {
		cp.TLS.HTTPS.CipherSuites = make([]types.TLSCipherSuite, len(o.TLS.HTTPS.CipherSuites))
		copy(cp.TLS.HTTPS.CipherSuites, o.TLS.HTTPS.CipherSuites)
	}
	if o.TaggedAddresses != nil {
		cp.TaggedAddresses = make(map[string]string, len(o.TaggedAddresses))
		for k2, v2 := range o.TaggedAddresses {
			cp.TaggedAddresses[k2] = v2
		}
	}
	if o.UIConfig.MetricsProviderFiles != nil {
		cp.UIConfig.MetricsProviderFiles = make([]string, len(o.UIConfig.MetricsProviderFiles))
		copy(cp.UIConfig.MetricsProviderFiles, o.UIConfig.MetricsProviderFiles)
	}
	if o.UIConfig.MetricsProxy.AddHeaders != nil {
		cp.UIConfig.MetricsProxy.AddHeaders = make([]UIMetricsProxyAddHeader, len(o.UIConfig.MetricsProxy.AddHeaders))
		copy(cp.UIConfig.MetricsProxy.AddHeaders, o.UIConfig.MetricsProxy.AddHeaders)
	}
	if o.UIConfig.MetricsProxy.PathAllowlist != nil {
		cp.UIConfig.MetricsProxy.PathAllowlist = make([]string, len(o.UIConfig.MetricsProxy.PathAllowlist))
		copy(cp.UIConfig.MetricsProxy.PathAllowlist, o.UIConfig.MetricsProxy.PathAllowlist)
	}
	if o.UIConfig.DashboardURLTemplates != nil {
		cp.UIConfig.DashboardURLTemplates = make(map[string]string, len(o.UIConfig.DashboardURLTemplates))
		for k3, v3 := range o.UIConfig.DashboardURLTemplates {
			cp.UIConfig.DashboardURLTemplates[k3] = v3
		}
	}
	if o.Watches != nil {
		cp.Watches = make([]map[string]interface{}, len(o.Watches))
		copy(cp.Watches, o.Watches)
		for i2 := range o.Watches {
			if o.Watches[i2] != nil {
				cp.Watches[i2] = make(map[string]interface{}, len(o.Watches[i2]))
				for k3, v3 := range o.Watches[i2] {
					cp.Watches[i2][k3] = v3
				}
			}
		}
	}
	if o.Experiments != nil {
		cp.Experiments = make([]string, len(o.Experiments))
		copy(cp.Experiments, o.Experiments)
	}
	return &cp
}
